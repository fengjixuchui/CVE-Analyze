from distutils.command.clean import clean
from xml.dom.minidom import Entity
from py2neo import Graph,Node,Relationship
import json
import os
from py2neo.matching import *

KGraph = Graph(
    "http://nju.csuncle.com:7474", 
    auth=("neo4j","wlm94929")
)

matcher = NodeMatcher(KGraph)
#############entity##########
Entity_Dict={}
CVE_entity = matcher.match('CVE').all()
CAPEC_entity = matcher.match('CAPEC').all()
ATTACK_entity = matcher.match('ATT&CK').all()
CWE_entity = matcher.match('CWE').all()

index=0
for CAPEC_item in CAPEC_entity:
    Entity_Dict["CAPEC-"+str(CAPEC_item["CAPEC_ID"])]=index
    index+=1

for ATTACK_item in ATTACK_entity:
    Entity_Dict[ATTACK_item["TTP_id_unique"]]=index
    index+=1

for CWE_item in CWE_entity:
    Entity_Dict["CWE-"+str(CWE_item["CWE_ID"])]=index
    index+=1

with open("entity2id.txt","w") as ef:
    ef.write(str(len(Entity_Dict)))
    ef.write("\n")
    for key,value in enumerate(Entity_Dict):
        ef.write(str(key)+"\t"+str(value)+"\n")


##########relation##########
relationship_matcher=RelationshipMatcher(KGraph)
# CVE2CWE=relationship_matcher.match(None, r_type='hasWeaknees').all()
CWE2CAPEC=relationship_matcher.match(None, r_type='CWE2CAPEC').all()
CAPEC2ATTACK=relationship_matcher.match(None, r_type='CAPEC2ATTACK').all()

Relation_Dict={}
# Relation_Dict["hasWeaknees"]=0
Relation_Dict["CWE2CAPEC"]=0
Relation_Dict["CAPEC2ATTACK"]=1

with open("relation2id.txt","w") as ef:
    ef.write(str(len(Relation_Dict)))
    ef.write("\n")
    for key,value in enumerate(Relation_Dict):
        ef.write(str(key)+"\t"+str(value)+"\n")


Entity_Relation_List=[]
for CWE2CAPEC_item in CWE2CAPEC:
    h_id=Entity_Dict["CWE-"+str(CWE2CAPEC_item.nodes[0]["CWE_ID"])]
    t_id=Entity_Dict["CAPEC-"+str(CWE2CAPEC_item.nodes[1]["CAPEC_ID"])]
    r_id=Relation_Dict["CWE2CAPEC"]

    Entity_Relation_List.append([h_id,t_id,r_id])

for CAPEC2ATTACK_item in CAPEC2ATTACK:
    h_id=Entity_Dict["CAPEC-"+str(CAPEC2ATTACK_item.nodes[0]["CAPEC_ID"])]
    t_id=Entity_Dict[CAPEC2ATTACK_item.nodes[1]["TTP_id_unique"]]
    r_id=Relation_Dict["CAPEC2ATTACK"]
    Entity_Relation_List.append([h_id,t_id,r_id])


train_list = Entity_Relation_List[0:int(0.5*len(Entity_Relation_List))]
validation_list = Entity_Relation_List[int(0.5*len(Entity_Relation_List)):int(0.75*len(Entity_Relation_List))]
test_list = Entity_Relation_List[int(0.75*len(Entity_Relation_List)):]


with open("train2id.txt","w") as ef:
    ef.write(str(len(train_list)))
    ef.write("\n")
    for item in train_list:
        ef.write(str(item[0])+"\t"+str(item[1])+"\t"+str(item[2])+"\n")


with open("valid2id.txt","w") as ef:
    ef.write(str(len(train_list)))
    ef.write("\n")
    for item in train_list:
        ef.write(str(item[0])+"\t"+str(item[1])+"\t"+str(item[2])+"\n")


with open("test2id.txt","w") as ef:
    ef.write(str(len(test_list)))
    ef.write("\n")
    for item in test_list:
        ef.write(str(item[0])+"\t"+str(item[1])+"\t"+str(item[2])+"\n")




