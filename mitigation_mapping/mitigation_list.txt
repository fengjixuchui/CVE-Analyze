1	Accessing Functionality Not Properly Constrained by ACLs	In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.
10	Buffer Overflow via Environment Variables	Do not expose environment variable to the user.
10	Buffer Overflow via Environment Variables	Do not use untrusted data in your environment variables.
10	Buffer Overflow via Environment Variables	Use a language or compiler that performs automatic bounds checking
10	Buffer Overflow via Environment Variables	There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.
100	Overflow Buffers	Use a language or compiler that performs automatic bounds checking.
100	Overflow Buffers	Use secure functions not vulnerable to buffer overflow.
100	Overflow Buffers	If you have to use dangerous functions, make sure that you do boundary checking.
100	Overflow Buffers	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
100	Overflow Buffers	Use OS-level preventative functionality. Not a complete solution.
100	Overflow Buffers	Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.
101	Server Side Include (SSI) Injection	Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them
101	Server Side Include (SSI) Injection	All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive
101	Server Side Include (SSI) Injection	Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead
102	Session Sidejacking	Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.
102	Session Sidejacking	Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.
103	Clickjacking	If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.
103	Clickjacking	Turn off JavaScript, Flash and disable CSS.
103	Clickjacking	When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.
104	Cross Zone Scripting	Disable script execution.
104	Cross Zone Scripting	Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone
104	Cross Zone Scripting	Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone
104	Cross Zone Scripting	Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum
104	Cross Zone Scripting	Ensure proper HTML output encoding before writing user supplied data to the page
105	HTTP Request Splitting	Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.
105	HTTP Request Splitting	Configuration: front-end HTTP agents notice ambiguous requests.
105	HTTP Request Splitting	Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.
105	HTTP Request Splitting	Configuration: Disable reuse of back-end connections.
105	HTTP Request Splitting	Configuration: Use HTTP/2 for back-end connections.
105	HTTP Request Splitting	Configuration: Use the same web server software for front-end and back-end server.
105	HTTP Request Splitting	Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.
105	HTTP Request Splitting	Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)
105	HTTP Request Splitting	Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.
105	HTTP Request Splitting	Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
107	Cross Site Tracing	Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.
107	Cross Site Tracing	Patch web browser against known security origin policy bypass exploits.
108	Command Line Execution through SQL Injection	Disable MSSQL xp_cmdshell directive on the database
108	Command Line Execution through SQL Injection	Properly validate the data (syntactically and semantically) before writing it to the database.
108	Command Line Execution through SQL Injection	Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).
109	Object Relational Mapping Injection	Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework
109	Object Relational Mapping Injection	Ensure to keep up to date with security relevant updates to the persistence framework used within your application.
11	Cause Web Server Misclassification	Implementation: Server routines should be determined by content not determined by filename or file extension.
110	SQL Injection through SOAP Parameter Tampering	Properly validate and sanitize/reject user input at the service provider.
110	SQL Injection through SOAP Parameter Tampering	Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.
110	SQL Injection through SOAP Parameter Tampering	At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.
111	JSON Hijacking (aka JavaScript Hijacking)	Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.
111	JSON Hijacking (aka JavaScript Hijacking)	On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).
111	JSON Hijacking (aka JavaScript Hijacking)	Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.
111	JSON Hijacking (aka JavaScript Hijacking)	Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.
112	Brute Force	Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.
112	Brute Force	Use a secret space that is well known and with no known patterns that may reduce functional size.
112	Brute Force	Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.
116	Excavation	Minimize error/response output to only what is necessary for functional use or corrective language.
116	Excavation	Remove potentially sensitive information that is not necessary for the application's functionality.
117	Interception	Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.
12	Choosing Message Identifier	Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.
12	Choosing Message Identifier	Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.
120	Double Encoding	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.
120	Double Encoding	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.
120	Double Encoding	When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.
120	Double Encoding	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
120	Double Encoding	Refer to the RFCs to safely decode URL.
120	Double Encoding	Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.
120	Double Encoding	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).
121	Exploit Non-Production Interfaces	Ensure that production systems to not contain non-production interfaces and that these interfaces are only used in development environments.
122	Privilege Abuse	Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.
123	Buffer Manipulation	To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.
125	Flooding	Ensure that protocols have specific limits of scale configured.
125	Flooding	Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.
125	Flooding	Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
126	Path Traversal	Design: Configure the access control correctly.
126	Path Traversal	Design: Enforce principle of least privilege.
126	Path Traversal	Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
126	Path Traversal	Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.
126	Path Traversal	Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
126	Path Traversal	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
126	Path Traversal	Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.
126	Path Traversal	Implementation: Perform input validation for all remote content, including remote and user-generated content.
126	Path Traversal	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
126	Path Traversal	Implementation: Use indirect references rather than actual file names.
126	Path Traversal	Implementation: Use possible permissions on file access when developing and deploying web applications.
126	Path Traversal	Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.
127	Directory Indexing	1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.
127	Directory Indexing	2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.
127	Directory Indexing	3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.
13	Subverting Environment Variable Values	Protect environment variables against unauthorized read and write access.
13	Subverting Environment Variable Values	Protect the configuration files which contain environment variables against illegitimate read and write access.
13	Subverting Environment Variable Values	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
13	Subverting Environment Variable Values	Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.
130	Excessive Allocation	Limit the amount of resources that are accessible to unprivileged users.
130	Excessive Allocation	Assume all input is malicious. Consider all potentially relevant properties when validating input.
130	Excessive Allocation	Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
130	Excessive Allocation	Use resource-limiting settings, if possible.
131	Resource Leak Exposure	If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).
131	Resource Leak Exposure	Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)
131	Resource Leak Exposure	Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.
132	Symlink Attack	Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.
132	Symlink Attack	Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.
133	Try All Common Switches	Design: Minimize switch and option functionality to only that necessary for correct function of the command.
133	Try All Common Switches	Implementation: Remove all debug and testing options from production code.
135	Format String Injection	Limit the usage of formatting string functions.
135	Format String Injection	Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.
136	LDAP Injection	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.
136	LDAP Injection	Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.
137	Parameter Injection	Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.
137	Parameter Injection	Treat all user input as untrusted data that must be validated before use.
139	Relative Path Traversal	Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement
139	Relative Path Traversal	Implementation: Perform input validation for all remote content, including remote and user-generated content.
139	Relative Path Traversal	Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.
139	Relative Path Traversal	Implementation: Prefer working without user input when using file system calls
139	Relative Path Traversal	Implementation: Use indirect references rather than actual file names.
139	Relative Path Traversal	Implementation: Use possible permissions on file access when developing and deploying web applications.
14	Client-side Injection-induced Buffer Overflow	The client software should not install untrusted code from a non-authenticated server.
14	Client-side Injection-induced Buffer Overflow	The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.
14	Client-side Injection-induced Buffer Overflow	Perform input validation for length of buffer inputs.
14	Client-side Injection-induced Buffer Overflow	Use a language or compiler that performs automatic bounds checking.
14	Client-side Injection-induced Buffer Overflow	Use an abstraction library to abstract away risky APIs. Not a complete solution.
14	Client-side Injection-induced Buffer Overflow	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
14	Client-side Injection-induced Buffer Overflow	Ensure all buffer uses are consistently bounds-checked.
14	Client-side Injection-induced Buffer Overflow	Use OS-level preventative functionality. Not a complete solution.
141	Cache Poisoning	Configuration: Disable client side caching.
141	Cache Poisoning	Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.
142	DNS Cache Poisoning	Configuration: Make sure your DNS servers have been updated to the latest versions
142	DNS Cache Poisoning	Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.
142	DNS Cache Poisoning	Configuration: Disable client side DNS caching.
146	XML Schema Poisoning	Design: Protect the schema against unauthorized modification.
146	XML Schema Poisoning	Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.
146	XML Schema Poisoning	Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.
147	XML Ping of the Death	Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.
147	XML Ping of the Death	Implementation: Provide for network flow control and traffic shaping to control access to the resources.
15	Command Delimiters	Design: Perform allowlist validation against a positive specification for command length, type, and parameters.
15	Command Delimiters	Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account
15	Command Delimiters	Implementation: Perform input validation for all remote content.
15	Command Delimiters	Implementation: Use type conversions such as JDBC prepared statements.
151	Identity Spoofing	Employ robust authentication processes (e.g., multi-factor authentication).
154	Resource Location Spoofing	Monitor network activity to detect any anomalous or unauthorized communication exchanges.
157	Sniffing Attacks	Encrypt sensitive information when transmitted on insecure mediums to prevent interception.
158	Sniffing Network Traffic	Obfuscate network traffic through encryption to prevent its readability by network sniffers.
158	Sniffing Network Traffic	Employ appropriate levels of segmentation to your network in accordance with best practices.
159	Redirect Access to Libraries	Implementation: Restrict the permission to modify the entries in the configuration file.
159	Redirect Access to Libraries	Implementation: Check the integrity of the dynamically linked libraries before use them.
159	Redirect Access to Libraries	Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.
16	Dictionary-based Password Attack	Create a strong password policy and ensure that your system enforces this policy.
16	Dictionary-based Password Attack	Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.
16	Dictionary-based Password Attack	Leverage multi-factor authentication for all authentication services.
163	Spear Phishing	Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.
164	Mobile Phishing	Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.
168	Windows ::DATA Alternate Data Stream	Design: Use FAT file systems which do not support Alternate Data Streams.
168	Windows ::DATA Alternate Data Stream	Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.
168	Windows ::DATA Alternate Data Stream	Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.
169	Footprinting	Keep patches up to date by installing weekly or daily if possible.
169	Footprinting	Shut down unnecessary services/ports.
169	Footprinting	Change default passwords by choosing strong passwords.
169	Footprinting	Curtail unexpected input.
169	Footprinting	Encrypt and password-protect sensitive data.
169	Footprinting	Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.
17	Using Malicious Files	Design: Enforce principle of least privilege
17	Using Malicious Files	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
17	Using Malicious Files	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
170	Web Application Fingerprinting	Implementation: Obfuscate server fields of HTTP response.
170	Web Application Fingerprinting	Implementation: Hide inner ordering of HTTP response header.
170	Web Application Fingerprinting	Implementation: Customizing HTTP error codes such as 404 or 500.
170	Web Application Fingerprinting	Implementation: Hide URL file extension.
170	Web Application Fingerprinting	Implementation: Hide HTTP response header software information filed.
170	Web Application Fingerprinting	Implementation: Hide cookie's software information filed.
170	Web Application Fingerprinting	Implementation: Appropriately deal with error messages.
170	Web Application Fingerprinting	Implementation: Obfuscate database type in Database API's error message.
173	Action Spoofing	Avoid interacting with suspicious sites or clicking suspicious links.
173	Action Spoofing	An organization should provide regular, robust cybersecurity training to its employees.
174	Flash Parameter Injection	User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).
178	Cross-Site Flashing	Implementation: Only allow known URL to be included as remote flash movies in a flash application
178	Cross-Site Flashing	Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.
18	XSS Targeting Non-Script Elements	In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.
18	XSS Targeting Non-Script Elements	All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.
180	Exploiting Incorrectly Configured Access Control Security Levels	Design: Configure the access control correctly.
182	Flash Injection	Implementation: remove sensitive information such as user name and password in the SWF file.
182	Flash Injection	Implementation: use validation on both client and server side.
182	Flash Injection	Implementation: remove debug information.
182	Flash Injection	Implementation: use SSL when loading external data
182	Flash Injection	Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.
186	Malicious Software Update	Validate software updates before installing.
188	Reverse Engineering	Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.
19	Embedding Scripts within Scripts	Use browser technologies that do not allow client side scripting.
19	Embedding Scripts within Scripts	Utilize strict type, character, and encoding enforcement.
19	Embedding Scripts within Scripts	Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
19	Embedding Scripts within Scripts	Ensure all content that is delivered to client is sanitized against an acceptable content specification.
19	Embedding Scripts within Scripts	Perform input validation for all remote content.
19	Embedding Scripts within Scripts	Perform output validation for all remote content.
19	Embedding Scripts within Scripts	Disable scripting languages such as JavaScript in browser
19	Embedding Scripts within Scripts	Session tokens for specific host
19	Embedding Scripts within Scripts	Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
19	Embedding Scripts within Scripts	Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode
193	PHP Remote File Inclusion	Implementation: Perform input validation for all remote content, including remote and user-generated content
193	PHP Remote File Inclusion	Implementation: Only allow known files to be included (allowlist)
193	PHP Remote File Inclusion	Implementation: Make use of indirect references passed in URL parameters instead of file names
193	PHP Remote File Inclusion	Configuration: Ensure that remote scripts cannot be include in the include or require PHP directives
196	Session Credential Falsification through Forging	Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.
196	Session Credential Falsification through Forging	Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.
197	Exponential Data Expansion	Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.
197	Exponential Data Expansion	Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.
198	XSS Targeting Error Pages	Design: Use libraries and templates that minimize unfiltered input.
198	XSS Targeting Error Pages	Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages.
198	XSS Targeting Error Pages	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
199	XSS Using Alternate Syntax	Design: Use browser technologies that do not allow client side scripting.
199	XSS Using Alternate Syntax	Design: Utilize strict type, character, and encoding enforcement
199	XSS Using Alternate Syntax	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
199	XSS Using Alternate Syntax	Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.
199	XSS Using Alternate Syntax	Implementation: Perform input validation for all remote content, including remote and user-generated content
199	XSS Using Alternate Syntax	Implementation: Perform output validation for all remote content.
199	XSS Using Alternate Syntax	Implementation: Disable scripting languages such as JavaScript in browser
199	XSS Using Alternate Syntax	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
2	Inducing Account Lockout	Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.
2	Inducing Account Lockout	When implementing security features, consider how they can be misused and made to turn on themselves.
20	Encryption Brute Forcing	Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.
20	Encryption Brute Forcing	In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.
201	Serialized Data External Linking	Configure the serialized data processor to only retrieve external entities from trusted sources.
203	Manipulate Registry Information	Ensure proper permissions are set for Registry hives to prevent users from modifying keys.
203	Manipulate Registry Information	Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.
203	Manipulate Registry Information	Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.
206	Signing Malicious Code	Ensure digital certificates are protected and inaccessible by unauthorized uses.
206	Signing Malicious Code	If a digital certificate has been compromised it should be revoked and regenerated.
206	Signing Malicious Code	Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.
207	Removing Important Client Functionality	Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.
207	Removing Important Client Functionality	Design: Ship client-side application with integrity checks (code signing) when possible.
207	Removing Important Client Functionality	Design: Use obfuscation and other techniques to prevent reverse engineering the client code.
21	Exploitation of Trusted Identifiers	Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.
21	Exploitation of Trusted Identifiers	Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.
21	Exploitation of Trusted Identifiers	Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.
21	Exploitation of Trusted Identifiers	Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.
21	Exploitation of Trusted Identifiers	Design: Use strong session identifiers that are protected in transit and at rest.
21	Exploitation of Trusted Identifiers	Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.
21	Exploitation of Trusted Identifiers	Implementation: Verify authenticity of all identifiers at runtime.
212	Functionality Misuse	Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.
212	Functionality Misuse	When implementing security features, consider how they can be misused and compromised.
215	Fuzzing for application mapping	Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.
215	Fuzzing for application mapping	Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.
215	Fuzzing for application mapping	Implementation: Obfuscate server fields of HTTP response.
215	Fuzzing for application mapping	Implementation: Hide inner ordering of HTTP response header.
215	Fuzzing for application mapping	Implementation: Customizing HTTP error codes such as 404 or 500.
215	Fuzzing for application mapping	Implementation: Hide HTTP response header software information filed.
215	Fuzzing for application mapping	Implementation: Hide cookie's software information filed.
215	Fuzzing for application mapping	Implementation: Obfuscate database type in Database API's error message.
216	Communication Channel Manipulation	Encrypt all sensitive communications using properly-configured cryptography.
216	Communication Channel Manipulation	Design the communication system such that it associates proper authentication/authorization with each channel/message.
217	Exploiting Incorrectly Configured SSL/TLS	Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.
217	Exploiting Incorrectly Configured SSL/TLS	Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.
217	Exploiting Incorrectly Configured SSL/TLS	Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.
218	Spoofing of UDDI/ebXML Messages	Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.
219	XML Routing Detour Attacks	Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.
219	XML Routing Detour Attacks	Implementation: Use SSL for connections between all parties with mutual authentication.
22	Exploiting Trust in Client	Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.
22	Exploiting Trust in Client	Design: Do not rely on client validation or encoding for security purposes.
22	Exploiting Trust in Client	Design: Utilize digital signatures to increase authentication assurance.
22	Exploiting Trust in Client	Design: Utilize two factor authentication to increase authentication assurance.
22	Exploiting Trust in Client	Implementation: Perform input validation for all remote content.
221	Data Serialization External Entities Blowup	This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.
221	Data Serialization External Entities Blowup	This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.
222	iFrame Overlay	Configuration: Disable iFrames in the Web browser.
222	iFrame Overlay	Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.
222	iFrame Overlay	Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.
224	Fingerprinting	While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.
227	Sustained Client Engagement	Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.
228	DTD Injection	Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.
228	DTD Injection	Implementation: Disallow the inclusion of DTDs as part of incoming messages.
228	DTD Injection	Implementation: Use XML parsing tools that protect against DTD attacks.
229	Serialized Data Parameter Blowup	This attack may be mitigated completely by using a parser that is not using a vulnerable container.
229	Serialized Data Parameter Blowup	Mitigation may limit the number of configuration parameters per dataset.
23	File Content Injection	Design: Enforce principle of least privilege
23	File Content Injection	Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)
23	File Content Injection	Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
23	File Content Injection	Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
23	File Content Injection	Implementation: Virus scanning on host
23	File Content Injection	Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.
230	Serialized Data with Nested Payloads	Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.
230	Serialized Data with Nested Payloads	Perform validation on canonical data.
230	Serialized Data with Nested Payloads	Pick a robust implementation of the data parser.
231	Oversized Serialized Data Payloads	Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.
231	Oversized Serialized Data Payloads	Perform validation on canonical data.
231	Oversized Serialized Data Payloads	Pick a robust implementation of the serialized data parser.
231	Oversized Serialized Data Payloads	Validate data against a valid schema or DTD prior to parsing.
237	Escaping a Sandbox by Calling Code in Another Language	Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.
237	Escaping a Sandbox by Calling Code in Another Language	Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.
237	Escaping a Sandbox by Calling Code in Another Language	Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.
237	Escaping a Sandbox by Calling Code in Another Language	Configuration: Get latest updates for the computer.
24	Filter Failure through Buffer Overflow	Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.
24	Filter Failure through Buffer Overflow	Pre-design: Use a language or compiler that performs automatic bounds checking.
24	Filter Failure through Buffer Overflow	Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
24	Filter Failure through Buffer Overflow	Operational: Use OS-level preventative functionality. Not a complete solution.
24	Filter Failure through Buffer Overflow	Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.
240	Resource Injection	Ensure all input content that is delivered to client is sanitized against an acceptable content specification.
240	Resource Injection	Perform input validation for all content.
240	Resource Injection	Enforce regular patching of software.
242	Code Injection	Utilize strict type, character, and encoding enforcement
242	Code Injection	Ensure all input content that is delivered to client is sanitized against an acceptable content specification.
242	Code Injection	Perform input validation for all content.
242	Code Injection	Enforce regular patching of software.
243	XSS Targeting HTML Attributes	Design: Use libraries and templates that minimize unfiltered input.
243	XSS Targeting HTML Attributes	Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.
243	XSS Targeting HTML Attributes	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
244	XSS Targeting URI Placeholders	Design: Use browser technologies that do not allow client side scripting.
244	XSS Targeting URI Placeholders	Design: Utilize strict type, character, and encoding enforcement.
244	XSS Targeting URI Placeholders	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
244	XSS Targeting URI Placeholders	Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.
244	XSS Targeting URI Placeholders	Implementation: Perform input validation for all remote content, including remote and user-generated content
244	XSS Targeting URI Placeholders	Implementation: Perform output validation for all remote content.
244	XSS Targeting URI Placeholders	Implementation: Disable scripting languages such as JavaScript in browser
244	XSS Targeting URI Placeholders	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
245	XSS Using Doubled Characters	Design: Use libraries and templates that minimize unfiltered input.
245	XSS Using Doubled Characters	Implementation: Normalize, filter and sanitize all user supplied fields.
245	XSS Using Doubled Characters	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
247	XSS Using Invalid Characters	Design: Use libraries and templates that minimize unfiltered input.
247	XSS Using Invalid Characters	Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations.
247	XSS Using Invalid Characters	Implementation: The victim should configure the browser to minimize active content from untrusted sources.
248	Command Injection	All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.
248	Command Injection	Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.
248	Command Injection	Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.
25	Forced Deadlock	Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).
25	Forced Deadlock	For competing actions, use well-known libraries which implement synchronization.
250	XML Injection	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.
250	XML Injection	Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
251	Local Code Inclusion	Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.
253	Remote Code Inclusion	Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.
256	SOAP Array Overflow	If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.
26	Leveraging Race Conditions	Use safe libraries to access resources such as files.
26	Leveraging Race Conditions	Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.
26	Leveraging Race Conditions	Use synchronization to control the flow of execution.
26	Leveraging Race Conditions	Use static analysis tools to find race conditions.
26	Leveraging Race Conditions	Pay attention to concurrency problems related to the access of resources.
267	Leverage Alternate Encoding	Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)
267	Leverage Alternate Encoding	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.
27	Leveraging Race Conditions via Symbolic Links	Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.
27	Leveraging Race Conditions via Symbolic Links	Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.
27	Leveraging Race Conditions via Symbolic Links	Follow the principle of least privilege when assigning access rights to files.
27	Leveraging Race Conditions via Symbolic Links	Ensure good compartmentalization in the system to provide protected areas that can be trusted.
270	Modification of Registry Run Keys	Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
271	Schema Poisoning	Design: Protect the schema against unauthorized modification.
271	Schema Poisoning	Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.
271	Schema Poisoning	Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.
273	HTTP Response Smuggling	Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.
273	HTTP Response Smuggling	Configuration: front-end HTTP agents notice ambiguous requests.
273	HTTP Response Smuggling	Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.
273	HTTP Response Smuggling	Configuration: Disable reuse of back-end connections.
273	HTTP Response Smuggling	Configuration: Use HTTP/2 for back-end connections.
273	HTTP Response Smuggling	Configuration: Use the same web server software for front-end and back-end server.
273	HTTP Response Smuggling	Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.
273	HTTP Response Smuggling	Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.
273	HTTP Response Smuggling	Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.
273	HTTP Response Smuggling	Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters
273	HTTP Response Smuggling	Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)
273	HTTP Response Smuggling	Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.
273	HTTP Response Smuggling	Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
274	HTTP Verb Tampering	Design: Ensure that only legitimate HTTP verbs are allowed.
274	HTTP Verb Tampering	Design: Do not use HTTP verbs as factors in access decisions.
275	DNS Rebinding	Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.
275	DNS Rebinding	Implementation: Reject HTTP request with a malicious Host header.
275	DNS Rebinding	Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.
278	Web Services Protocol Manipulation	Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.
278	Web Services Protocol Manipulation	Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.
28	Fuzzing	Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.
28	Fuzzing	Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.
285	ICMP Echo Request Ping	Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.
29	Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions	Use safe libraries to access resources such as files.
29	Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions	Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.
29	Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions	Use synchronization to control the flow of execution.
29	Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions	Use static analysis tools to find race conditions.
29	Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions	Pay attention to concurrency problems related to the access of resources.
297	TCP ACK Ping	Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.
298	UDP Ping	Configure your firewall to block egress ICMP messages.
3	Using Leading 'Ghost' Character Sequences to Bypass Input Filters	Use an allowlist rather than a denylist input validation.
3	Using Leading 'Ghost' Character Sequences to Bypass Input Filters	Canonicalize all data prior to validation.
3	Using Leading 'Ghost' Character Sequences to Bypass Input Filters	Take an iterative approach to input validation (defense in depth).
30	Hijacking a Privileged Thread of Execution	Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.
30	Hijacking a Privileged Thread of Execution	Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.
301	TCP Connect Scan	Employ a robust network defense posture that includes an IDS/IPS system.
302	TCP FIN Scan	FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.
303	TCP Xmas Scan	Employ a robust network defensive posture that includes a managed IDS/IPS.
304	TCP Null Scan	Employ a robust network defensive posture that includes a managed IDS/IPS.
307	TCP RPC Scan	Typically, an IDS/IPS system is very effective against this type of attack.
308	UDP Scan	Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.
308	UDP Scan	UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.
31	Accessing/Intercepting/Modifying HTTP Cookies	Design: Use input validation for cookies
31	Accessing/Intercepting/Modifying HTTP Cookies	Design: Generate and validate MAC for cookies
31	Accessing/Intercepting/Modifying HTTP Cookies	Implementation: Use SSL/TLS to protect cookie in transit
31	Accessing/Intercepting/Modifying HTTP Cookies	Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.
32	XSS Through HTTP Query Strings	Design: Use browser technologies that do not allow client side scripting.
32	XSS Through HTTP Query Strings	Design: Utilize strict type, character, and encoding enforcement
32	XSS Through HTTP Query Strings	Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
32	XSS Through HTTP Query Strings	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
32	XSS Through HTTP Query Strings	Implementation: Perform input validation for all remote content, including remote and user-generated content
32	XSS Through HTTP Query Strings	Implementation: Perform output validation for all remote content.
32	XSS Through HTTP Query Strings	Implementation: Disable scripting languages such as JavaScript in browser
32	XSS Through HTTP Query Strings	Implementation: Session tokens for specific host
32	XSS Through HTTP Query Strings	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
32	XSS Through HTTP Query Strings	Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode
33	HTTP Request Smuggling	Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.
33	HTTP Request Smuggling	Configuration: front-end HTTP agents notice ambiguous requests.
33	HTTP Request Smuggling	Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.
33	HTTP Request Smuggling	Configuration: Disable reuse of back-end connections.
33	HTTP Request Smuggling	Configuration: Use HTTP/2 for back-end connections.
33	HTTP Request Smuggling	Configuration: Use the same web server software for front-end and back-end server.
33	HTTP Request Smuggling	Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.
33	HTTP Request Smuggling	Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.
33	HTTP Request Smuggling	Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.
33	HTTP Request Smuggling	Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as: Headers with no space before the value “chunked” Headers with extra spaces Headers beginning with trailing characters Headers providing a value “chunk” instead of “chunked” (the server normalizes this as chunked encoding) Headers with multiple spaces before the value “chunked” Headers with quoted values (whether single or double quotations) Headers with CRLF characters before the value “chunked” Values with invalid characters
33	HTTP Request Smuggling	Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)
33	HTTP Request Smuggling	Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.
33	HTTP Request Smuggling	Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
34	HTTP Response Splitting	Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.
34	HTTP Response Splitting	Configuration: front-end HTTP agents notice ambiguous requests.
34	HTTP Response Splitting	Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.
34	HTTP Response Splitting	Configuration: Disable reuse of back-end connections.
34	HTTP Response Splitting	Configuration: Use HTTP/2 for back-end connections.
34	HTTP Response Splitting	Configuration: Use the same web server software for front-end and back-end server.
34	HTTP Response Splitting	Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.
34	HTTP Response Splitting	Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)
34	HTTP Response Splitting	Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.
34	HTTP Response Splitting	Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.
35	Leverage Executable Code in Non-Executable Files	Design: Enforce principle of least privilege
35	Leverage Executable Code in Non-Executable Files	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
35	Leverage Executable Code in Non-Executable Files	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
35	Leverage Executable Code in Non-Executable Files	Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.
35	Leverage Executable Code in Non-Executable Files	Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.
36	Using Unpublished Interfaces	Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.
38	Leveraging/Manipulating Configuration File Search Paths	Design: Enforce principle of least privilege
38	Leveraging/Manipulating Configuration File Search Paths	Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program
38	Leveraging/Manipulating Configuration File Search Paths	Implementation: Host integrity monitoring
383	Harvesting Information via API Event Monitoring	Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.
39	Manipulating Opaque Client-based Data Tokens	One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic message authentication code (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a malicious value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.
39	Manipulating Opaque Client-based Data Tokens	Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)
39	Manipulating Opaque Client-based Data Tokens	Make sure that all session tokens use a good source of randomness
39	Manipulating Opaque Client-based Data Tokens	Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.
4	Using Alternative IP Address Encodings	Design: Default deny access control policies
4	Using Alternative IP Address Encodings	Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)
4	Using Alternative IP Address Encodings	Implementation: Perform input validation for all remote content.
40	Manipulating Writeable Terminal Devices	Design: Ensure that terminals are only writeable by named owner user and/or administrator
40	Manipulating Writeable Terminal Devices	Design: Enforce principle of least privilege
402	Bypassing ATA Password Security	Avoid using ATA password security when possible.
402	Bypassing ATA Password Security	Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.
402	Bypassing ATA Password Security	Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.
407	Pretexting	An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.
41	Using Meta-characters in E-mail Headers to Inject Malicious Payloads	Design: Perform validation on email header data
41	Using Meta-characters in E-mail Headers to Inject Malicious Payloads	Implementation: Implement email filtering solutions on mail server or on MTA, relay server.
41	Using Meta-characters in E-mail Headers to Inject Malicious Payloads	Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names
416	Manipulate Human Behavior	An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.
417	Influence Perception	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
418	Influence Perception of Reciprocation	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
42	MIME Conversion	Stay up to date with third party vendor patches
42	MIME Conversion	Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,T=DNS/RFC822/X-Unix,A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,D=$z:/,T=X-Unix,A=sh -c $u This can be achieved for the Mlocal and Mprog Mailers by modifying the .mc file to include the following lines: define(`LOCAL_MAILER_FLAGS',ifdef(`LOCAL_MAILER_FLAGS',`translit(LOCAL_MAILER_FLAGS, `9')',`rmn')) define(`LOCAL_SHELL_FLAGS',ifdef(`LOCAL_SHELL_FLAGS',`translit(LOCAL_SHELL_FLAGS, `9')',`eu')) and then rebuilding the sendmail.cf file using m4(1). From Exploiting Software, please see reference below.
42	MIME Conversion	Use the sendmail restricted shell program (smrsh)
42	MIME Conversion	Use mail.local
420	Influence Perception of Scarcity	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
421	Influence Perception of Authority	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
422	Influence Perception of Commitment and Consistency	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
422	Influence Perception of Commitment and Consistency	Individuals should avoid complying with suspicious requests.
423	Influence Perception of Liking	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
424	Influence Perception of Consensus or Social Proof	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
425	Target Influence via Framing	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
425	Target Influence via Framing	Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.
426	Influence via Incentives	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
427	Influence via Psychological Principles	An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.
43	Exploiting Multiple Input Interpretation Layers	An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.
43	Exploiting Multiple Input Interpretation Layers	Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.
43	Exploiting Multiple Input Interpretation Layers	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.
44	Overflow Binary Resource File	Perform appropriate bounds checking on all buffers.
44	Overflow Binary Resource File	Design: Enforce principle of least privilege
44	Overflow Binary Resource File	Design: Static code analysis
44	Overflow Binary Resource File	Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes
44	Overflow Binary Resource File	Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.
442	Infected Software	Leverage anti-virus products to detect and quarantine software with known virus.
443	Malicious Logic Inserted Into Product Software by Authorized Developer	Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.
443	Malicious Logic Inserted Into Product Software by Authorized Developer	Don't assume popular third-party components are free from malware or vulnerabilities. Assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment.
444	Development Alteration	Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.
445	Malicious Logic Insertion into Product Software via Configuration Management Manipulation	Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.
445	Malicious Logic Insertion into Product Software via Configuration Management Manipulation	Leverage anti-virus products to detect and quarantine software with known virus.
446	Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency	Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.
447	Design Alteration	Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.
447	Design Alteration	Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.
448	Embed Virus into DLL	Leverage anti-virus products to detect and quarantine software with known virus.
45	Buffer Overflow via Symbolic Links	Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.
45	Buffer Overflow via Symbolic Links	Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.
45	Buffer Overflow via Symbolic Links	Pay attention to the resource pointed to by your symlink links (See attack pattern named Forced Symlink race), they can be replaced by malicious resources.
45	Buffer Overflow via Symbolic Links	Always check the size of the input data before copying to a buffer.
45	Buffer Overflow via Symbolic Links	Use a language or compiler that performs automatic bounds checking.
45	Buffer Overflow via Symbolic Links	Use an abstraction library to abstract away risky APIs. Not a complete solution.
45	Buffer Overflow via Symbolic Links	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
45	Buffer Overflow via Symbolic Links	Use OS-level preventative functionality. Not a complete solution.
456	Infected Memory	Leverage anti-virus products to detect stop operations with known virus.
457	USB Memory Attacks	Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.
457	USB Memory Attacks	Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.
457	USB Memory Attacks	Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.
459	Creating a Rogue Certification Authority Certificate	Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.
46	Overflow Variables and Tags	Use a language or compiler that performs automatic bounds checking.
46	Overflow Variables and Tags	Use an abstraction library to abstract away risky APIs. Not a complete solution.
46	Overflow Variables and Tags	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
46	Overflow Variables and Tags	Use OS-level preventative functionality. Not a complete solution.
46	Overflow Variables and Tags	Do not trust input data from user. Validate all user input.
460	HTTP Parameter Pollution (HPP)	Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests
460	HTTP Parameter Pollution (HPP)	Design: Perform URL encoding
460	HTTP Parameter Pollution (HPP)	Implementation: Use strict regular expressions in URL rewriting
460	HTTP Parameter Pollution (HPP)	Implementation: Beware of multiple occurrences of a parameter in a Query String
461	Web Services API Signature Forgery Leveraging Hash Function Extension Weakness	Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1
462	Cross-Domain Search Timing	Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests
462	Cross-Domain Search Timing	Design: The browser's security model could be fixed to not leak timing information for cross domain requests
463	Padding Oracle Crypto Attack	Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption
463	Padding Oracle Crypto Attack	Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.
464	Evercookie	Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.
464	Evercookie	Design: Safari browser's private browsing mode is currently effective against evercookies.
465	Transparent Proxy Abuse	Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.
465	Transparent Proxy Abuse	Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.
466	Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy	Design: Tunnel communications through a secure proxy
466	Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy	Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)
467	Cross Site Identification	Usage: Users should always explicitly log out from the social networking sites when done using them.
467	Cross Site Identification	Usage: Users should not open other tabs in the browser when using a social networking site.
468	Generic Cross-Browser Cross-Domain Theft	Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.
468	Generic Cross-Browser Cross-Domain Theft	Implementation: Perform proper HTML encoding and URL escaping
469	HTTP DoS	Configuration: Configure web server software to limit the waiting period on opened HTTP sessions
469	HTTP DoS	Design: Use load balancing mechanisms
47	Buffer Overflow via Parameter Expansion	Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system
470	Expanding Control over the Operating System from the Database	Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection
470	Expanding Control over the Operating System from the Database	Configuration: Ensure that the DBMS is patched with the latest security patches
470	Expanding Control over the Operating System from the Database	Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS
470	Expanding Control over the Operating System from the Database	Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user
470	Expanding Control over the Operating System from the Database	Usage: Do not use the DBMS machine for anything else other than the database
470	Expanding Control over the Operating System from the Database	Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.
470	Expanding Control over the Operating System from the Database	Usage: Use an intrusion detection system to monitor network connections and logs on the database host.
470	Expanding Control over the Operating System from the Database	Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised
471	Search Order Hijacking	Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected
471	Search Order Hijacking	Design: Sign system DLLs so that unauthorized DLLs can be detected.
472	Browser Fingerprinting	Configuration: Disable Java Script in the browser
474	Signature Spoofing by Key Theft	Restrict access to private keys from non-supervisory accounts
474	Signature Spoofing by Key Theft	Restrict access to administrative personnel and processes only
474	Signature Spoofing by Key Theft	Ensure all remote methods are secured
474	Signature Spoofing by Key Theft	Ensure all services are patched and up to date
475	Signature Spoofing by Improper Validation	Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.
476	Signature Spoofing by Misrepresentation	Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.
477	Signature Spoofing by Mixing Signed and Unsigned Content	Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.
478	Modification of Windows Service Configuration	Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.
48	Passing Local Filenames to Functions That Expect a URL	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
48	Passing Local Filenames to Functions That Expect a URL	Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.
48	Passing Local Filenames to Functions That Expect a URL	Design: Use browser technologies that do not allow client side scripting.
48	Passing Local Filenames to Functions That Expect a URL	Implementation: Perform input validation for all remote content.
48	Passing Local Filenames to Functions That Expect a URL	Implementation: Perform output validation for all remote content.
48	Passing Local Filenames to Functions That Expect a URL	Implementation: Disable scripting languages such as JavaScript in browser
480	Escaping Virtualization	Ensure virtualization software is current and up-to-date.
480	Escaping Virtualization	Abide by the least privilege principle to avoid assigning users more privileges than necessary.
481	Contradictory Destinations in Traffic Routing Schemes	Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.
482	TCP Flood	To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.
485	Signature Spoofing by Key Recreation	Ensure cryptographic elements have been sufficiently tested for weaknesses.
486	UDP Flood	To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.
487	ICMP Flood	To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.
488	HTTP Flood	To mitigate this type of an attack, an organization can monitor the typical traffic flow. When spikes in usage occur, filters could examine traffic for indicators of bad behavior with respect to the web servers, and then create firewall rules to deny the malicious IP addresses. These patterns in the filter could be a combination of trained behavior, knowledge of standards as they apply to the web server, known patterns, or anomaly detection. Firewalling source IPs works since the HTTP is sent using TCP so the source IP can't be spoofed; if the source IP is spoofed is, then it's not legitimate traffic. Special care should be taken care with rule sets to ensure low false positive rates along with a method at the application layer to allow a valid user to begin using the service again. Another possible solution is using 3rd party providers as they have experts, knowledge, experience, and resources to deal with the attack and mitigate it before hand or while it occurs. The best mitigation is preparation before an attack, but there is no bulletproof solution as with ample resources a brute force attack may succeed.
489	SSL Flood	To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.
49	Password Brute Forcing	Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.
49	Password Brute Forcing	Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.
49	Password Brute Forcing	Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.
490	Amplification	To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.
491	Quadratic Data Expansion	Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.
491	Quadratic Data Expansion	Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.
492	Regular Expression Exponential Blowup	Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.
493	SOAP Array Blowup	Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.
494	TCP Fragmentation	This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule IF FO=1 and PROTOCOL=TCP then DROP PACKET as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.
495	UDP Fragmentation	This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.
496	ICMP Fragmentation	This attack may be mitigated through egress filtering based on ICMP payload so a network is a good neighbor to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.
497	File Discovery	Leverage file protection mechanisms to render these files accessible only to authorized parties.
498	Probe iOS Screenshots	To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.
499	Android Intent Intercept	To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.
5	Blue Boxing	Implementation: Upgrade phone lines. Note this may be prohibitively expensive
5	Blue Boxing	Use strong access control such as two factor access control for administrative access to the switch
50	Password Recovery Exploitation	Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.
50	Password Recovery Exploitation	E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.
50	Password Recovery Exploitation	Ensure that your password recovery functionality is not vulnerable to an injection style attack.
500	WebView Injection	The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.
501	Android Activity Hijack	To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).
501	Android Activity Hijack	Never use implicit intents for inter-application communication.
502	Intent Spoof	To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.
503	WebView Exposure	To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.
504	Task Impersonation	The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.
505	Scheme Squatting	The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.
507	Physical Theft	To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.
508	Shoulder Surfing	Be mindful of your surroundings when discussing or viewing sensitive information in public areas.
508	Shoulder Surfing	Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information.
509	Kerberoasting	Monitor system and domain logs for abnormal access.
509	Kerberoasting	Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.
509	Kerberoasting	Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.
509	Kerberoasting	Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.
51	Poison Web Service Registry	Design: Enforce principle of least privilege
51	Poison Web Service Registry	Design: Harden registry server and file access permissions
51	Poison Web Service Registry	Implementation: Implement communications to and from the registry using secure protocols
510	SaaS User Request Forgery	To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.
510	SaaS User Request Forgery	Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)
511	Infiltration of Software Development Environment	Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware.
516	Hardware Component Substitution During Baselining	Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.
516	Hardware Component Substitution During Baselining	Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.
517	Documentation Alteration to Circumvent Dial-down	Digitize documents and cryptographically sign them to verify authenticity.
517	Documentation Alteration to Circumvent Dial-down	Password protect documents and make them read-only for unauthorized users.
517	Documentation Alteration to Circumvent Dial-down	Avoid emailing important documents and configurations.
517	Documentation Alteration to Circumvent Dial-down	Ensure deleted files are actually deleted.
517	Documentation Alteration to Circumvent Dial-down	Maintain backups of the document for recovery and verification.
518	Documentation Alteration to Produce Under-performing Systems	Digitize documents and cryptographically sign them to verify authenticity.
518	Documentation Alteration to Produce Under-performing Systems	Password protect documents and make them read-only for unauthorized users.
518	Documentation Alteration to Produce Under-performing Systems	Avoid emailing important documents and configurations.
518	Documentation Alteration to Produce Under-performing Systems	Ensure deleted files are actually deleted.
518	Documentation Alteration to Produce Under-performing Systems	Maintain backups of the document for recovery and verification.
518	Documentation Alteration to Produce Under-performing Systems	Separate need-to-know information from system configuration information depending on the user.
519	Documentation Alteration to Cause Errors in System Design	Digitize documents and cryptographically sign them to verify authenticity.
519	Documentation Alteration to Cause Errors in System Design	Password protect documents and make them read-only for unauthorized users.
519	Documentation Alteration to Cause Errors in System Design	Avoid emailing important documents and configurations.
519	Documentation Alteration to Cause Errors in System Design	Ensure deleted files are actually deleted.
519	Documentation Alteration to Cause Errors in System Design	Maintain multiple instances of the document across different privileged users for recovery and verification.
52	Embedding NULL Bytes	Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.
520	Counterfeit Hardware Component Inserted During Product Assembly	Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.
520	Counterfeit Hardware Component Inserted During Product Assembly	Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.
521	Hardware Design Specifications Are Altered	Digitize documents and cryptographically sign them to verify authenticity.
521	Hardware Design Specifications Are Altered	Password protect documents and make them read-only for unauthorized users.
521	Hardware Design Specifications Are Altered	Avoid emailing important documents and configurations.
521	Hardware Design Specifications Are Altered	Ensure deleted files are actually deleted.
521	Hardware Design Specifications Are Altered	Maintain backups of the document for recovery and verification.
521	Hardware Design Specifications Are Altered	Separate need-to-know information from system configuration information depending on the user.
522	Malicious Hardware Component Replacement	Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.
522	Malicious Hardware Component Replacement	Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.
522	Malicious Hardware Component Replacement	Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering.
523	Malicious Software Implanted	Deploy strong code integrity policies to allow only authorized apps to run.
523	Malicious Software Implanted	Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.
523	Malicious Software Implanted	Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.
523	Malicious Software Implanted	Require SSL for update channels and implement certificate transparency based verification.
523	Malicious Software Implanted	Sign everything, including configuration files, XML files and packages.
523	Malicious Software Implanted	Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.
524	Rogue Integration Procedures	Deploy strong code integrity policies to allow only authorized apps to run.
524	Rogue Integration Procedures	Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.
524	Rogue Integration Procedures	Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.
524	Rogue Integration Procedures	Require SSL for update channels and implement certificate transparency based verification.
524	Rogue Integration Procedures	Sign everything, including configuration files, XML files and packages.
524	Rogue Integration Procedures	Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.
524	Rogue Integration Procedures	Maintain strong physical system access controls and monitor networks and physical facilities for insider threats.
528	XML Flood	Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.
528	XML Flood	Implementation: Provide for network flow control and traffic shaping to control access to the resources.
529	Malware-Directed Internal Reconnaissance	Keep patches up to date by installing weekly or daily if possible.
529	Malware-Directed Internal Reconnaissance	Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
53	Postfix, Null Terminate, and Backslash	Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.
53	Postfix, Null Terminate, and Backslash	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
530	Provide Counterfeit Component	There are various methods to detect if the component is a counterfeit. See section II of [REF-703] for many techniques.
532	Altered Installed BIOS	Deploy strong code integrity policies to allow only authorized apps to run.
532	Altered Installed BIOS	Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.
532	Altered Installed BIOS	Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.
532	Altered Installed BIOS	Require SSL for update channels and implement certificate transparency based verification.
532	Altered Installed BIOS	Sign update packages and BIOS patches.
532	Altered Installed BIOS	Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.
533	Malicious Manual Software Update	Only accept software updates from an official source.
535	Malicious Gray Market Hardware	Purchase only from authorized resellers.
535	Malicious Gray Market Hardware	Validate serial numbers from multiple sources
536	Data Injected During Configuration	Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.
537	Infiltration of Hardware Development Environment	Verify software downloads and updates to ensure they have not been modified be adversaries
537	Infiltration of Hardware Development Environment	Leverage antivirus tools to detect known malware
537	Infiltration of Hardware Development Environment	Do not download software from untrusted sources
537	Infiltration of Hardware Development Environment	Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks
54	Query System for Information	Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.
54	Query System for Information	Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.
546	Incomplete Data Deletion in a Multi-Tenant Environment	Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.
546	Incomplete Data Deletion in a Multi-Tenant Environment	Deletion of data should be completed promptly when requested.
549	Local Execution of Code	Employ robust cybersecurity training for all employees.
549	Local Execution of Code	Implement system antivirus software that scans all attachments before opening them.
549	Local Execution of Code	Regularly patch all software.
549	Local Execution of Code	Execute all suspicious files in a sandbox environment.
55	Rainbow Table Password Cracking	Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.
550	Install New Service	Limit privileges of user accounts so new service creation can only be performed by authorized administrators.
551	Modify Existing Service	Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.
552	Install Rootkit	Prevent adversary access to privileged accounts necessary to install rootkits.
555	Remote Services with Stolen Credentials	Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.
556	Replace File Extension Handlers	Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.
560	Use of Known Domain Credentials	Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
560	Use of Known Domain Credentials	Create a strong password policy and ensure that your system enforces this policy.
560	Use of Known Domain Credentials	Ensure users are not reusing username/password combinations for multiple systems, applications, or services.
560	Use of Known Domain Credentials	Do not reuse local administrator account credentials across systems.
560	Use of Known Domain Credentials	Deny remote use of local admin credentials to log into domain systems.
560	Use of Known Domain Credentials	Do not allow accounts to be a local administrator on more than one system.
560	Use of Known Domain Credentials	Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.
560	Use of Known Domain Credentials	Monitor system and domain logs for abnormal credential access.
561	Windows Admin Shares with Stolen Credentials	Do not reuse local administrator account credentials across systems.
561	Windows Admin Shares with Stolen Credentials	Deny remote use of local admin credentials to log into domain systems.
561	Windows Admin Shares with Stolen Credentials	Do not allow accounts to be a local administrator on more than one system.
562	Modify Shared File	Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.
563	Add Malicious File to Shared Webroot	Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.
564	Run Software at Logon	Restrict write access to logon scripts to necessary administrators.
565	Password Spraying	Create a strong password policy and ensure that your system enforces this policy.
565	Password Spraying	Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.
565	Password Spraying	Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
568	Capture Credentials via Keylogger	Strong physical security can help reduce the ability of an adversary to install a keylogger.
57	Utilizing REST's Trust in the System Resource to Obtain Sensitive Data	Implementation: Implement message level security such as HMAC in the HTTP communication
57	Utilizing REST's Trust in the System Resource to Obtain Sensitive Data	Design: Utilize defense in depth, do not rely on a single security mechanism like SSL
57	Utilizing REST's Trust in the System Resource to Obtain Sensitive Data	Design: Enforce principle of least privilege
573	Process Footprinting	Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
574	Services Footprinting	Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.
575	Account Footprinting	Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.
576	Group Permission Footprinting	Identify programs (such as net) that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.
577	Owner Footprinting	Ensure that proper permissions on files and folders are enacted to limit accessibility.
578	Disable Security Software	Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.
579	Replace Winlogon Helper DLL	Changes to registry entries in HKLMSoftwareMicrosoftWindows NTWinlogonNotify that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.
58	Restful Privilege Elevation	Design: Enforce principle of least privilege
58	Restful Privilege Elevation	Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side
58	Restful Privilege Elevation	Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose
580	System Footprinting	Keep patches up to date by installing weekly or daily if possible.
580	System Footprinting	Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
581	Security Software Footprinting	Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
583	Disabling Network Hardware	Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..
584	BGP Route Disabling	Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.
584	BGP Route Disabling	Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.
586	Object Injection	Implementation: Validate object before deserialization process
586	Object Injection	Design: Limit which types can be deserialized.
586	Object Injection	Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.
586	Object Injection	Implementation: Keep session state on the server, when possible.
587	Cross Frame Scripting (XFS)	Avoid clicking on untrusted links.
587	Cross Frame Scripting (XFS)	Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.
588	DOM-Based XSS	Use browser technologies that do not allow client-side scripting.
588	DOM-Based XSS	Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.
588	DOM-Based XSS	Ensure that all user-supplied input is validated before use.
589	DNS Blocking	Hard Coded Alternate DNS server in applications
589	DNS Blocking	Avoid dependence on DNS
589	DNS Blocking	Include hosts file/IP address in the application.
589	DNS Blocking	Ensure best practices with respect to communications channel protections.
589	DNS Blocking	Use a .onion domain with Tor support
59	Session Credential Falsification through Prediction	Use a strong source of randomness to generate a session ID.
59	Session Credential Falsification through Prediction	Use adequate length session IDs
59	Session Credential Falsification through Prediction	Do not use information available to the user in order to generate session ID (e.g., time).
59	Session Credential Falsification through Prediction	Ideas for creating random numbers are offered by Eastlake [RFC1750]
59	Session Credential Falsification through Prediction	Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.
590	IP Address Blocking	Have a large pool of backup IPs built into the application and support proxy capability in the application.
591	Reflected XSS	Use browser technologies that do not allow client-side scripting.
591	Reflected XSS	Utilize strict type, character, and encoding enforcement.
591	Reflected XSS	Ensure that all user-supplied input is validated before use.
592	Stored XSS	Use browser technologies that do not allow client-side scripting.
592	Stored XSS	Utilize strict type, character, and encoding enforcement.
592	Stored XSS	Ensure that all user-supplied input is validated before being stored.
593	Session Hijacking	Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.
597	Absolute Path Traversal	Design: Configure the access control correctly.
597	Absolute Path Traversal	Design: Enforce principle of least privilege.
597	Absolute Path Traversal	Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
597	Absolute Path Traversal	Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.
597	Absolute Path Traversal	Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
597	Absolute Path Traversal	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
597	Absolute Path Traversal	Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.
597	Absolute Path Traversal	Implementation: Perform input validation for all remote content, including remote and user-generated content.
597	Absolute Path Traversal	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
597	Absolute Path Traversal	Implementation: Use indirect references rather than actual file names.
597	Absolute Path Traversal	Implementation: Use possible permissions on file access when developing and deploying web applications.
597	Absolute Path Traversal	Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach.
598	DNS Spoofing	Design: Avoid dependence on DNS
598	DNS Spoofing	Design: Include hosts file/IP address in the application
598	DNS Spoofing	Implementation: Utilize a .onion domain with Tor support
598	DNS Spoofing	Implementation: DNSSEC
598	DNS Spoofing	Implementation: DNS-hold-open
6	Argument Injection	Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.
6	Argument Injection	Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.
6	Argument Injection	Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.
60	Reusing Session IDs (aka Session Replay)	Always invalidate a session ID after the user logout.
60	Reusing Session IDs (aka Session Replay)	Setup a session time out for the session IDs.
60	Reusing Session IDs (aka Session Replay)	Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).
60	Reusing Session IDs (aka Session Replay)	Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.
60	Reusing Session IDs (aka Session Replay)	Encrypt the session data associated with the session ID.
60	Reusing Session IDs (aka Session Replay)	Use multifactor authentication.
600	Credential Stuffing	Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
600	Credential Stuffing	Create a strong password policy and ensure that your system enforces this policy.
600	Credential Stuffing	Ensure users are not reusing username/password combinations for multiple systems, applications, or services.
600	Credential Stuffing	Do not reuse local administrator account credentials across systems.
600	Credential Stuffing	Deny remote use of local admin credentials to log into domain systems.
600	Credential Stuffing	Do not allow accounts to be a local administrator on more than one system.
600	Credential Stuffing	Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.
600	Credential Stuffing	Monitor system and domain logs for abnormal credential access.
604	Wi-Fi Jamming	Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.
605	Cellular Jamming	Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.
606	Weakening of Cellular Encryption	Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.
606	Weakening of Cellular Encryption	Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.
608	Cryptanalysis of Cellular Encryption	Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.
608	Cryptanalysis of Cellular Encryption	Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.
609	Cellular Traffic Intercept	Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.
61	Session Fixation	Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.
61	Session Fixation	Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.
61	Session Fixation	Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.
610	Cellular Data Injection	Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.
611	BitSquatting	Authenticate all servers and perform redundant checks when using DNS hostnames.
611	BitSquatting	When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.
612	WiFi MAC Address Tracking	Automatic randomization of WiFi MAC addresses
612	WiFi MAC Address Tracking	Frequent changing of handset and retransmission device
613	WiFi SSID Tracking	Do not enable the feature of Hidden SSIDs (also known as Network Cloaking) – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.
613	WiFi SSID Tracking	Frequently change the SSID to new and unrelated values
614	Rooting SIM Cards	Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.
615	Evil Twin Wi-Fi Attack	Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.
617	Cellular Rogue Base Station	Passively monitor cellular network connection for real-time threat detection and logging for manual review.
618	Cellular Broadcast Message Request	Frequent changing of mobile number.
62	Cross Site Request Forgery	Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.
62	Cross Site Request Forgery	Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.
62	Cross Site Request Forgery	Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.
62	Cross Site Request Forgery	In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.
621	Analysis of Packet Timing and Sizes	Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.
622	Electromagnetic Side-Channel Attack	Utilize side-channel resistant implementations of all crypto algorithms.
622	Electromagnetic Side-Channel Attack	Strong physical security of all devices that contain secret key information. (even when devices are not in use)
623	Compromising Emanations Attack	None are known.
624	Hardware Fault Injection	Implement robust physical security countermeasures and monitoring.
625	Mobile Device Fault Injection	Strong physical security of all devices that contain secret key information. (even when devices are not in use)
625	Mobile Device Fault Injection	Frequent changes to secret keys and certificates.
626	Smudge Attack	Strong physical security of the device.
63	Cross-Site Scripting (XSS)	Design: Use browser technologies that do not allow client side scripting.
63	Cross-Site Scripting (XSS)	Design: Utilize strict type, character, and encoding enforcement
63	Cross-Site Scripting (XSS)	Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
63	Cross-Site Scripting (XSS)	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
63	Cross-Site Scripting (XSS)	Implementation: Perform input validation for all remote content.
63	Cross-Site Scripting (XSS)	Implementation: Perform output validation for all remote content.
63	Cross-Site Scripting (XSS)	Implementation: Session tokens for specific host
63	Cross-Site Scripting (XSS)	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
630	TypoSquatting	Authenticate all servers and perform redundant checks when using DNS hostnames.
630	TypoSquatting	Purchase potential TypoSquatted domains and forward to legitimate domain.
631	SoundSquatting	Authenticate all servers and perform redundant checks when using DNS hostnames.
631	SoundSquatting	Purchase potential SoundSquatted domains and forward to legitimate domain.
632	Homograph Attack via Homoglyphs	Authenticate all servers and perform redundant checks when using DNS hostnames.
632	Homograph Attack via Homoglyphs	Utilize browsers that can warn users if URLs contain characters from different character sets.
634	Probe Audio and Video Peripherals	Prevent unknown code from executing on a system through the use of an allowlist policy.
634	Probe Audio and Video Peripherals	Patch installed applications as soon as new updates become available.
635	Alternative Execution Due to Deceptive Filenames	Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.
636	Hiding Malicious Data or Code within Files	Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.
637	Collect Data from Clipboard	While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.
637	Collect Data from Clipboard	Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.
638	Altered Component Firmware	Leverage hardware components known to not be susceptible to these types of attacks.
638	Altered Component Firmware	Implement hardware RAID infrastructure.
639	Probe System Files	Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.
64	Using Slashes and URL Encoding Combined to Bypass Validation Logic	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.
64	Using Slashes and URL Encoding Combined to Bypass Validation Logic	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.
64	Using Slashes and URL Encoding Combined to Bypass Validation Logic	When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.
64	Using Slashes and URL Encoding Combined to Bypass Validation Logic	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
64	Using Slashes and URL Encoding Combined to Bypass Validation Logic	Refer to the RFCs to safely decode URL.
64	Using Slashes and URL Encoding Combined to Bypass Validation Logic	Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.
64	Using Slashes and URL Encoding Combined to Bypass Validation Logic	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).
640	Inclusion of Code in Existing Process	Prevent unknown or malicious software from loading through using an allowlist policy.
640	Inclusion of Code in Existing Process	Properly restrict the location of the software being used.
640	Inclusion of Code in Existing Process	Leverage security kernel modules providing advanced access control and process restrictions like SELinux.
640	Inclusion of Code in Existing Process	Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.
640	Inclusion of Code in Existing Process	Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.
640	Inclusion of Code in Existing Process	Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.
640	Inclusion of Code in Existing Process	Monitor processes and command-line arguments for unknown behavior related to code injection.
641	DLL Side-Loading	Prevent unknown DLLs from loading through using an allowlist policy.
641	DLL Side-Loading	Patch installed applications as soon as new updates become available.
641	DLL Side-Loading	Properly restrict the location of the software being used.
641	DLL Side-Loading	Use of sxstrace.exe on Windows as well as manual inspection of the manifests.
641	DLL Side-Loading	Require code signing and avoid using relative paths for resources.
642	Replace Binaries	Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.
643	Identify Shared Files/Directories on System	Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.
644	Use of Captured Hashes (Pass The Hash)	Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.
644	Use of Captured Hashes (Pass The Hash)	Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
644	Use of Captured Hashes (Pass The Hash)	Monitor system and domain logs for abnormal credential access.
644	Use of Captured Hashes (Pass The Hash)	Create a strong password policy and ensure that your system enforces this policy.
644	Use of Captured Hashes (Pass The Hash)	Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.
645	Use of Captured Tickets (Pass The Ticket)	Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.
645	Use of Captured Tickets (Pass The Ticket)	Monitor system and domain logs for abnormal access.
646	Peripheral Footprinting	Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.
647	Collect Data from Registries	Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.
647	Collect Data from Registries	Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.
648	Collect Data from Screen Capture	Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.
648	Collect Data from Screen Capture	While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.
649	Adding a Space to a File Extension	File extensions should be checked to see if non-visible characters are being included.
65	Sniff Application Code	Design: Encrypt all communication between the client and server.
65	Sniff Application Code	Implementation: Use SSL, SSH, SCP.
65	Sniff Application Code	Operation: Use ifconfig/ipconfig or other tools to detect the sniffer installed in the network.
650	Upload a Web Shell to a Web Server	Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.
650	Upload a Web Shell to a Web Server	Ensure that the file permissions in directories on the web server from which files can be execute is set to the least privilege settings, and that those directories contents is controlled by an allowlist.
651	Eavesdropping	Be mindful of your surroundings when discussing sensitive information in public areas.
651	Eavesdropping	Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.
651	Eavesdropping	If possible, physically disable the microphone on your machine if it is not needed.
652	Use of Known Kerberos Credentials	Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.
652	Use of Known Kerberos Credentials	Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.
652	Use of Known Kerberos Credentials	Do not reuse Kerberos service account credentials across systems.
652	Use of Known Kerberos Credentials	Deny remote use of Kerberos service account credentials to log into domain systems.
652	Use of Known Kerberos Credentials	Do not allow Kerberos service accounts to be a local administrator on more than one system.
652	Use of Known Kerberos Credentials	Enable at least AES Kerberos encryption for tickets.
652	Use of Known Kerberos Credentials	Monitor system and domain logs for abnormal credential access.
653	Use of Known Windows Credentials	Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.
653	Use of Known Windows Credentials	Create a strong password policy and ensure that your system enforces this policy.
653	Use of Known Windows Credentials	Ensure users are not reusing username/password combinations for multiple systems, applications, or services.
653	Use of Known Windows Credentials	Do not reuse local administrator account credentials across systems.
653	Use of Known Windows Credentials	Deny remote use of local admin credentials to log into domain systems.
653	Use of Known Windows Credentials	Do not allow accounts to be a local administrator on more than one system.
653	Use of Known Windows Credentials	Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.
653	Use of Known Windows Credentials	Monitor system and domain logs for abnormal credential access.
654	Credential Prompt Impersonation	The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.
656	Voice Phishing	Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.
66	SQL Injection	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.
66	SQL Injection	Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.
66	SQL Injection	Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
660	Root/Jailbreak Detection Evasion via Hooking	Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.
660	Root/Jailbreak Detection Evasion via Hooking	Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.
660	Root/Jailbreak Detection Evasion via Hooking	Inspect the application's stack trace for suspicious method calls.
660	Root/Jailbreak Detection Evasion via Hooking	Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.
660	Root/Jailbreak Detection Evasion via Hooking	For iOS applications, ensure application methods do not originate from outside of Apple's SDK.
661	Root/Jailbreak Detection Evasion via Debugging	Instantiate checks within the application code that ensures debuggers are not attached.
662	Adversary in the Browser (AiTB)	Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.
662	Adversary in the Browser (AiTB)	Leverage anti-malware tools, which can detect Trojan Horse malware.
662	Adversary in the Browser (AiTB)	Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.
662	Adversary in the Browser (AiTB)	Limit user permissions to prevent browser pivoting.
662	Adversary in the Browser (AiTB)	Ensure browser sessions are regularly terminated and when their effective lifetime ends.
663	Exploitation of Transient Instruction Execution	Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources
663	Exploitation of Transient Instruction Execution	Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables
663	Exploitation of Transient Instruction Execution	Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution
663	Exploitation of Transient Instruction Execution	Configuration: Disable SharedArrayBuffer for Web Browsers
663	Exploitation of Transient Instruction Execution	Configuration: Disable Copy-on-Write between Cloud VMs
663	Exploitation of Transient Instruction Execution	Configuration: Privilege Checks on Cache Flush Instructions
663	Exploitation of Transient Instruction Execution	Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks
664	Server Side Request Forgery	Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.
664	Server Side Request Forgery	Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.
664	Server Side Request Forgery	Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.
664	Server Side Request Forgery	Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.
664	Server Side Request Forgery	Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.
665	Exploitation of Thunderbolt Protection Flaws	Implementation: Kernel Direct Memory Access Protection
665	Exploitation of Thunderbolt Protection Flaws	Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface
665	Exploitation of Thunderbolt Protection Flaws	Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface
665	Exploitation of Thunderbolt Protection Flaws	Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode
665	Exploitation of Thunderbolt Protection Flaws	Configuration: Set Security Level to SL3 for Thunderbolt 2 system port
665	Exploitation of Thunderbolt Protection Flaws	Configuration: Disable PCIe tunneling to set Security Level to SL3
665	Exploitation of Thunderbolt Protection Flaws	Configuration: Disable Boot Camp upon MacOS systems
666	BlueSmacking	Disable Bluetooth when not being used.
666	BlueSmacking	When using Bluetooth, set it to hidden or non-discoverable mode.
667	Bluetooth Impersonation AttackS (BIAS)	Disable Bluetooth in public places.
667	Bluetooth Impersonation AttackS (BIAS)	Verify incoming Bluetooth connections; do not automatically trust.
667	Bluetooth Impersonation AttackS (BIAS)	Change default PIN passwords and always use one when connecting.
668	Key Negotiation of Bluetooth Attack (KNOB)	Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.
669	Alteration of a Software Update	Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.
669	Alteration of a Software Update	Require elevated privileges for distribution of software and software updates.
67	String Format Overflow in syslog()	The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, %s, cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data.
670	Software Development Tools Maliciously Altered	Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.
670	Software Development Tools Maliciously Altered	Avoid giving elevated privileges to developers.
671	Requirements for ASIC Functionality Maliciously Altered	Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.
671	Requirements for ASIC Functionality Maliciously Altered	Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.
671	Requirements for ASIC Functionality Maliciously Altered	Require that provenance of COTS microelectronic components be known whenever procured.
671	Requirements for ASIC Functionality Maliciously Altered	Conduct detailed vendor assessment before acquiring COTS hardware.
672	Malicious Code Implanted During Chip Programming	Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.
672	Malicious Code Implanted During Chip Programming	Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.
672	Malicious Code Implanted During Chip Programming	Require that provenance of COTS microelectronic components be known whenever procured.
672	Malicious Code Implanted During Chip Programming	Conduct detailed vendor assessment before acquiring COTS hardware.
673	Developer Signing Maliciously Altered Software	Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.
673	Developer Signing Maliciously Altered Software	Employ intrusion detection and malware detection capabilities on IDE systems where feasible.
674	Design for FPGA Maliciously Altered	Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.
674	Design for FPGA Maliciously Altered	Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.
674	Design for FPGA Maliciously Altered	Require that provenance of COTS microelectronic components be known whenever procured.
674	Design for FPGA Maliciously Altered	Conduct detailed vendor assessment before acquiring COTS hardware.
675	Retrieve Data from Decommissioned Devices	Backup device data before erasure to retain intellectual property and inside knowledge.
675	Retrieve Data from Decommissioned Devices	Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.
675	Retrieve Data from Decommissioned Devices	Use a secure erase software.
675	Retrieve Data from Decommissioned Devices	Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.
675	Retrieve Data from Decommissioned Devices	Physically destroy memory and SIM cards for mobile devices not intended to be reused.
675	Retrieve Data from Decommissioned Devices	Ensure that the user account has been terminated or switched to a new device before destroying.
676	NoSQL Injection	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.
676	NoSQL Injection	If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.
676	NoSQL Injection	Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.
676	NoSQL Injection	Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
676	NoSQL Injection	Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.
676	NoSQL Injection	If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as mongo-sanitize.
676	NoSQL Injection	If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.
676	NoSQL Injection	Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application.
677	Server Functionality Compromise	Purchase IT systems, components and parts from government approved vendors whenever possible.
677	Server Functionality Compromise	Establish diversity among suppliers.
677	Server Functionality Compromise	Conduct rigorous threat assessments of suppliers.
677	Server Functionality Compromise	Require that Bills of Material (BoM) for critical parts and components be certified.
677	Server Functionality Compromise	Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.
677	Server Functionality Compromise	Establish trusted supplier networks.
678	System Build Data Maliciously Altered	Implement configuration management security practices that protect the integrity of software and associated data.
678	System Build Data Maliciously Altered	Monitor and control access to the configuration management system.
678	System Build Data Maliciously Altered	Harden centralized repositories against attack.
678	System Build Data Maliciously Altered	Establish acceptance criteria for configuration management check-in to assure integrity.
678	System Build Data Maliciously Altered	Plan for and audit the security of configuration management administration processes.
678	System Build Data Maliciously Altered	Maintain configuration control over operational systems.
679	Exploitation of Improperly Configured or Implemented Memory Protections	Ensure that protected and unprotected memory ranges are isolated and do not overlap.
679	Exploitation of Improperly Configured or Implemented Memory Protections	If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.
679	Exploitation of Improperly Configured or Implemented Memory Protections	Ensure that original and mirrored memory regions apply the same protections.
679	Exploitation of Improperly Configured or Implemented Memory Protections	Ensure immutable code or data is programmed into ROM or write-once memory.
68	Subvert Code-signing Facilities	A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.
68	Subvert Code-signing Facilities	If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.
680	Exploitation of Improperly Controlled Registers	Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.
680	Exploitation of Improperly Controlled Registers	Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.
680	Exploitation of Improperly Controlled Registers	Test security lock programming flow in both pre-silicon and post-silicon environments.
680	Exploitation of Improperly Controlled Registers	Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.
680	Exploitation of Improperly Controlled Registers	Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.
681	Exploitation of Improperly Controlled Hardware Security Identifiers	Review generation of security identifiers for design inconsistencies and common weaknesses.
681	Exploitation of Improperly Controlled Hardware Security Identifiers	Review security identifier decoders for design inconsistencies and common weaknesses.
681	Exploitation of Improperly Controlled Hardware Security Identifiers	Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.
69	Target Programs with Elevated Privileges	Apply the principle of least privilege.
69	Target Programs with Elevated Privileges	Validate all untrusted data.
69	Target Programs with Elevated Privileges	Apply the latest patches.
69	Target Programs with Elevated Privileges	Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.
69	Target Programs with Elevated Privileges	Avoid revealing information about your system (e.g., version of the program) to anonymous users.
69	Target Programs with Elevated Privileges	Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.
69	Target Programs with Elevated Privileges	If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.
69	Target Programs with Elevated Privileges	Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.
69	Target Programs with Elevated Privileges	Monitor traffic and resource usage and pay attention if resource exhaustion occurs.
69	Target Programs with Elevated Privileges	Protect your log file from unauthorized modification and log forging.
7	Blind SQL Injection	Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.
7	Blind SQL Injection	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.
70	Try Common or Default Usernames and Passwords	Delete all default account credentials that may be put in by the product vendor.
70	Try Common or Default Usernames and Passwords	Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.
70	Try Common or Default Usernames and Passwords	Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.
70	Try Common or Default Usernames and Passwords	Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.
71	Using Unicode Encoding to Bypass Validation Logic	Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.
71	Using Unicode Encoding to Bypass Validation Logic	Ensure that filtering or input validation is applied to canonical data.
71	Using Unicode Encoding to Bypass Validation Logic	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
72	URL Encoding	Refer to the RFCs to safely decode URL.
72	URL Encoding	Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.
72	URL Encoding	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).
72	URL Encoding	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
72	URL Encoding	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.
72	URL Encoding	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)
72	URL Encoding	When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.
73	User-Controlled Filename	Design: Use browser technologies that do not allow client side scripting.
73	User-Controlled Filename	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
73	User-Controlled Filename	Implementation: Perform input validation for all remote content.
73	User-Controlled Filename	Implementation: Perform output validation for all remote content.
73	User-Controlled Filename	Implementation: Disable scripting languages such as JavaScript in browser
73	User-Controlled Filename	Implementation: Scan dynamically generated content against validation specification
74	Manipulating State	Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.
74	Manipulating State	Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.
74	Manipulating State	Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.
74	Manipulating State	All possible states must be handled by hardware finite state machines.
75	Manipulating Writeable Configuration Files	Design: Enforce principle of least privilege
75	Manipulating Writeable Configuration Files	Design: Backup copies of all configuration files
75	Manipulating Writeable Configuration Files	Implementation: Integrity monitoring for configuration files
75	Manipulating Writeable Configuration Files	Implementation: Enforce audit logging on code and configuration promotion procedures.
75	Manipulating Writeable Configuration Files	Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD
76	Manipulating Web Input to File System Calls	Design: Enforce principle of least privilege.
76	Manipulating Web Input to File System Calls	Design: Ensure all input is validated, and does not contain file system commands
76	Manipulating Web Input to File System Calls	Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
76	Manipulating Web Input to File System Calls	Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.
76	Manipulating Web Input to File System Calls	Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.
77	Manipulating User-Controlled Variables	Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.
77	Manipulating User-Controlled Variables	A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.
77	Manipulating User-Controlled Variables	Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.
77	Manipulating User-Controlled Variables	Use encapsulation when declaring your variables. This is to lower the exposure of your variables.
77	Manipulating User-Controlled Variables	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.
78	Using Escaped Slashes in Alternate Encoding	Verify that the user-supplied data does not use backslash character to escape malicious characters.
78	Using Escaped Slashes in Alternate Encoding	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
78	Using Escaped Slashes in Alternate Encoding	Be aware of the threat of alternative method of data encoding.
78	Using Escaped Slashes in Alternate Encoding	Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.
78	Using Escaped Slashes in Alternate Encoding	In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.
78	Using Escaped Slashes in Alternate Encoding	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.
78	Using Escaped Slashes in Alternate Encoding	Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
79	Using Slashes in Alternate Encoding	Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.
79	Using Slashes in Alternate Encoding	When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.
79	Using Slashes in Alternate Encoding	There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)
79	Using Slashes in Alternate Encoding	Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)
79	Using Slashes in Alternate Encoding	Test your path decoding process against malicious input.
79	Using Slashes in Alternate Encoding	In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.
79	Using Slashes in Alternate Encoding	Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.
8	Buffer Overflow in an API Call	Use a language or compiler that performs automatic bounds checking.
8	Buffer Overflow in an API Call	Use secure functions not vulnerable to buffer overflow.
8	Buffer Overflow in an API Call	If you have to use dangerous functions, make sure that you do boundary checking.
8	Buffer Overflow in an API Call	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
8	Buffer Overflow in an API Call	Use OS-level preventative functionality. Not a complete solution.
80	Using UTF-8 Encoding to Bypass Validation Logic	The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.
80	Using UTF-8 Encoding to Bypass Validation Logic	The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode overlong sequences (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to ...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence. Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.
80	Using UTF-8 Encoding to Bypass Validation Logic	For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).
80	Using UTF-8 Encoding to Bypass Validation Logic	Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)
80	Using UTF-8 Encoding to Bypass Validation Logic	Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.
81	Web Logs Tampering	Design: Use input validation before writing to web log
81	Web Logs Tampering	Design: Validate all log data before it is output
83	XPath Injection	Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.
83	XPath Injection	Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.
83	XPath Injection	Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.
84	XQuery Injection	Design: Perform input allowlist validation on all XML input
84	XQuery Injection	Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.
85	AJAX Footprinting	Design: Use browser technologies that do not allow client side scripting.
85	AJAX Footprinting	Implementation: Perform input validation for all remote content.
86	XSS Through HTTP Headers	Design: Use browser technologies that do not allow client side scripting.
86	XSS Through HTTP Headers	Design: Utilize strict type, character, and encoding enforcement
86	XSS Through HTTP Headers	Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.
86	XSS Through HTTP Headers	Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.
86	XSS Through HTTP Headers	Implementation: Perform input validation for all remote content.
86	XSS Through HTTP Headers	Implementation: Perform output validation for all remote content.
86	XSS Through HTTP Headers	Implementation: Disable scripting languages such as JavaScript in browser
86	XSS Through HTTP Headers	Implementation: Session tokens for specific host
86	XSS Through HTTP Headers	Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.
87	Forceful Browsing	Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.
87	Forceful Browsing	Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.
88	OS Command Injection	Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.
88	OS Command Injection	Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands
88	OS Command Injection	All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.
89	Pharming	All sensitive information must be handled over a secure connection.
89	Pharming	Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.
89	Pharming	End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.
9	Buffer Overflow in Local Command-Line Utilities	Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.
9	Buffer Overflow in Local Command-Line Utilities	Use a language or compiler that performs automatic bounds checking.
9	Buffer Overflow in Local Command-Line Utilities	Use an abstraction library to abstract away risky APIs. Not a complete solution.
9	Buffer Overflow in Local Command-Line Utilities	Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
9	Buffer Overflow in Local Command-Line Utilities	Operational: Use OS-level preventative functionality. Not a complete solution.
9	Buffer Overflow in Local Command-Line Utilities	Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.
9	Buffer Overflow in Local Command-Line Utilities	Do not unnecessarily expose services.
90	Reflection Attack in Authentication Protocol	The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further
90	Reflection Attack in Authentication Protocol	The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.
90	Reflection Attack in Authentication Protocol	Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol
92	Forced Integer Overflow	Use a language or compiler that performs automatic bounds checking.
92	Forced Integer Overflow	Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.
92	Forced Integer Overflow	Use an abstraction library to abstract away risky APIs. Not a complete solution.
92	Forced Integer Overflow	Always do bound checking before consuming user input data.
93	Log Injection-Tampering-Forging	Carefully control access to physical log files.
93	Log Injection-Tampering-Forging	Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.
93	Log Injection-Tampering-Forging	Use synchronization to control the flow of execution.
93	Log Injection-Tampering-Forging	Use static analysis tools to identify log forging vulnerabilities.
93	Log Injection-Tampering-Forging	Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.
94	Adversary in the Middle (AiTM)	Ensure Public Keys are signed by a Certificate Authority
94	Adversary in the Middle (AiTM)	Encrypt communications using cryptography (e.g., SSL/TLS)
94	Adversary in the Middle (AiTM)	Use Strong mutual authentication to always fully authenticate both ends of any communications channel.
94	Adversary in the Middle (AiTM)	Exchange public keys using a secure channel
95	WSDL Scanning	It is important to protect WSDL file or provide limited access to it.
95	WSDL Scanning	Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.
95	WSDL Scanning	Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.
95	WSDL Scanning	Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.
95	WSDL Scanning	Validate the received messages against the WSDL Schema. Incomplete solution.
96	Block Access to Libraries	Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.
97	Cryptanalysis	Use proven cryptographic algorithms with recommended key sizes.
97	Cryptanalysis	Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data
98	Phishing	Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.
