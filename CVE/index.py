from email import header
import json
import random
import base64
import requests
from random import randint
# from bs4 import BeautifulSoup
from time import sleep
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import base64
from datetime import datetime
import sys
import re
import sys
import logging
from io import BytesIO
import urllib
import urllib3
import os
import jsonlines




options = Options()
options.add_argument('--headless')
driver = webdriver.Chrome(options = options)

def EX_solve(year_month):
    os.remove(year_month+".lck")

def get_year_month_list():
    driver.get("https://nvd.nist.gov/vuln/full-listing")
    year_month_content=driver.find_element(by=By.ID,value="body-section").find_elements(by=By.TAG_NAME,value="div")[1].find_elements(by=By.TAG_NAME,value="span")[1:5]
    year_month_list={}
    for year_month in year_month_content:
        year=year_month.find_element(by=By.TAG_NAME,value="strong").text
        months=year_month.find_elements(by=By.TAG_NAME,value="a")

        for month in months:
            url=month.get_attribute("href")
            year_month_list[year+"_"+month.text]=url
            # print(year_month_list)
    driver.close()
    return year_month_list

def capture_year_month_data(year_month,year_month_url):
    year_month_driver = webdriver.Chrome(options = options)
    year_month_driver.get(year_month_url)
    CVES=year_month_driver.find_element(by=By.ID,value="body-section").find_elements(by=By.CLASS_NAME,value="row")[1].find_elements(by=By.TAG_NAME,value="a")
    CVES_list={}
    # index=0
    for cve_item in CVES:
        CVES_list[cve_item.text]=cve_item.get_attribute("href")

        # index+=1
        # if index>=3:
        #     break
    
    
    CVEs_Detail=[]
    for CVE,CVE_url in CVES_list.items():

        CVE_Detail={}
        CVE_Detail["CVE_ID"]=CVE

        CVE_Description=""
        try:
            year_month_driver.get(CVE_url)
        except Exception:
            year_month_driver.close()
            os.remove(year_month+".lck")
            
        
        try:
            CVE_Description=year_month_driver.find_element(by=By.XPATH,value="//p[@data-testid='vuln-description']").text
        except Exception:
            pass
    
        CVE_Detail["CVE_Description"]=CVE_Description

        CVE_Score_Detail={}
        context=[]
        try:
        #    CVE_Score=year_month_driver.find_element(by=By.ID,value="Vuln3CvssPanel").find_element(by=By.CLASS_NAME,value="severityDetail").find_element(by=By.TAG_NAME,value="a").text
            context=year_month_driver.find_element(by=By.ID,value="Vuln3CvssPanel").find_elements(by=By.TAG_NAME,value="strong")[1:]
        except:
            pass
        
        Flag=""
        if len(context)>0:
            for st in context:
                try:
                    key=st.text
                    value=st.find_element(by=By.XPATH,value="following-sibling::span[1]").text
                except Exception:
                    pass
                
                if "NIST" in key or "CNA" in key:
                    Flag=key
                
                if "Score" in key:
                    key=Flag+key
                    Flag=""
                CVE_Score_Detail[key]=value  
        
        CVE_Detail["CVE_Score"]=CVE_Score_Detail

        Reference={}
        Table=[]
        try:
            Table=year_month_driver.find_element(by=By.XPATH,value="//table[@data-testid='vuln-hyperlinks-table']").find_element(by=By.TAG_NAME,value="tbody").find_elements(by=By.TAG_NAME,value="tr")
        except:
            pass

        if len(Table)>0:
            for tr in Table:
                tds=[]
                link=""
                ref=[]
                try:
                    tds=tr.find_elements(by=By.TAG_NAME,value="td")
                    link=tds[0].find_element(by=By.TAG_NAME,value="a").text
                except:
                    pass
                
                if len(tds)>1:
                    badges=[]
                    try:
                        badges=tds[1].find_elements(by=By.CLASS_NAME,value="badge")
                    except:
                        pass
                    
                    if len(badges)>0:
                        for badge in badges:
                            ref.append(badge.text)
                        
                Reference[link]=ref

        CVE_Detail["Reference"]=Reference

        CWEs={}
        Table=[]
        try:
            Table=year_month_driver.find_element(by=By.XPATH,value="//table[@data-testid='vuln-CWEs-table']").find_element(by=By.TAG_NAME,value="tbody").find_elements(by=By.TAG_NAME,value="tr")
        except:
            pass
            
        if len(Table)>0:
            for tr in Table:
                tds=[]
                id=""
                name=""
                try:
                    tds=tr.find_elements(by=By.TAG_NAME,value="td")
                except:
                    pass

                if len(tds)>0:
                    try:
                        id=tds[0].find_element(by=By.TAG_NAME,value="a").text
                        name=tds[1].text
                    except:
                        pass

                if id!="":
                    CWEs[id]=name

        CVE_Detail["CWE"]=CWEs
        CVEs_Detail.append(CVE_Detail)

    return CVEs_Detail



def capture_all_data(year_month_list):
    for year_month,year_month_url in year_month_list.items():
        if os.path.exists(year_month+".jsonl") or os.path.exists(year_month+".lck"):
            continue
        # os.mknod(year_month+".lck")
        lockfile=open(year_month+".lck","w")
        lockfile.close()

        CVEs_Detail=capture_year_month_data(year_month,year_month_url)

        with jsonlines.open(year_month+'.jsonl', mode='a') as writer:
            for CVE in CVEs_Detail:
                writer.write(CVE)
        
        os.remove(year_month+".lck")
        



if __name__=="__main__":
    year_month_list=get_year_month_list()
    capture_all_data(year_month_list)












# loginname=driver.find_element_by_id("loginname")
loginname=driver.find_element(by=By.ID, value="loginname")
# password=driver.find_element_by_id("password")
password=driver.find_element(by=By.ID, value="password")
# login=driver.find_element_by_id("btn-login")
login=driver.find_element(by=By.ID, value="btn-login")
loginname.send_keys(username_text)
password.send_keys(password_text)
login.click()

# logging.info("axx")
sleep(3)
# cookies=get_cookies(driver)
# session = requests.Session()
# session.cookies.update(cookies)

try:
    driver.get("https://bmfw.www.gov.cn/xgbdhsktjcjgcx/index.html")
except Exception:
    driver.execute_script('window.stop()')