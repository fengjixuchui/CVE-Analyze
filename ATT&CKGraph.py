
from distutils.command.clean import clean
from py2neo import Graph,Node,Relationship
import json
import os
from py2neo.matching import *

KGraph = Graph(
    "http://nju.csuncle.com:7474", 
    auth=("neo4j","wlm94929")
)

KGraph.delete_all()
####CVEKG#####


jsonl_list=[]
datanames = os.listdir("CVE")
for dataname in datanames:
    if os.path.splitext(dataname)[1] == '.jsonl':#目录下包含.json的文件
        print(dataname)
        jsonl_list.append(dataname)

for jl in jsonl_list:
    with open("CVE\\"+jl,"r",encoding="utf-8") as f:
        jl_lines=f.readlines()
        for line in jl_lines:
            line2json=json.loads(line)
            if line2json["CVE_Description"]=="":
                continue

            CVE_Node = Node("CVE", name=line2json["CVE_ID"])
            CVE_Node["CVE_ID"]=line2json["CVE_ID"]
            CVE_Node["CVE_Description"]=line2json["CVE_Description"]
            for cveitem,cvevalue in line2json["CVE_Score"].items():
                if "Score" in cveitem or "Vector" in cveitem:
                    CVE_Node[cveitem]=cvevalue

            # CVE_Node["Reference"]=line2json["Reference"]
            # CVE_Node["CWE"]=line2json["CWE"]
            CWE_ID=""
            for cveitem,cvevalue in line2json["CWE"].items():
                    CWE_ID+=cveitem+":"
            CVE_Node["CWE"]=CWE_ID[0:-1]

            KGraph.create(CVE_Node)
            

####CWE#####
with open("CWE\\1000.json","r",encoding="utf8") as f:
    CWE_items=json.loads(f.read())
    for cwe in CWE_items:
        CWE_Node = Node("CWE", name=cwe["CWE-ID"])
        CWE_Node["CWE_ID"]=cwe["CWE-ID"]
        CWE_Node["Name"]=cwe["Name"]
        CWE_Node["Weakness Abstraction"]=cwe["Weakness Abstraction"]
        CWE_Node["Status"]=cwe["Status"]
        CWE_Node["Description"]=cwe["Description"]
        CWE_Node["Extended Description"]=cwe["Extended Description"]
        CWE_Node["Related Weaknesses"]=cwe["Related Weaknesses"]
        CWE_Node["Weakness Ordinalities"]=cwe["Weakness Ordinalities"]
        CWE_Node["Applicable Platforms"]=cwe["Applicable Platforms"]
        CWE_Node["Background Details"]=cwe["Background Details"]
        CWE_Node["Alternate Terms"]=cwe["Alternate Terms"]
        CWE_Node["Modes Of Introduction"]=cwe["Modes Of Introduction"]
        CWE_Node["Exploitation Factors"]=cwe["Exploitation Factors"]
        CWE_Node["Likelihood of Exploit"]=cwe["Likelihood of Exploit"]
        CWE_Node["Common Consequences"]=cwe["Common Consequences"]
        CWE_Node["Detection Methods"]=cwe["Detection Methods"]
        CWE_Node["Potential Mitigations"]=cwe["Potential Mitigations"]
        CWE_Node["Observed Examples"]=cwe["Observed Examples"]
        CWE_Node["Functional Areas"]=cwe["Functional Areas"]
        CWE_Node["Affected Resources"]=cwe["Affected Resources"]
        CWE_Node["Taxonomy Mappings"]=cwe["Taxonomy Mappings"]
        CWE_Node["Related Attack Patterns"]=cwe["Related Attack Patterns"]
        CWE_Node["Notes"]=cwe["Notes"]
        KGraph.create(CWE_Node)

####CAPEC#####
with open("CAPEC\\3000.csv\\3000.json","r",encoding="utf8") as f:
    CAPEC_items=json.loads(f.read())
    for capec in CAPEC_items:
        CAPEC_Node = Node("CAPEC", name=capec["'ID"])
        CAPEC_Node["CAPEC_ID"]=capec["'ID"]
        CAPEC_Node["Name"]=capec["Name"]
        CAPEC_Node["Abstraction"]=capec["Abstraction"]
        CAPEC_Node["Status"]=capec["Status"]
        CAPEC_Node["Description"]=capec["Description"]
        CAPEC_Node["Alternate Terms"]=capec["Alternate Terms"]
        CAPEC_Node["Likelihood Of Attack"]=capec["Likelihood Of Attack"]
        CAPEC_Node["Typical Severity"]=capec["Typical Severity"]
        CAPEC_Node["Related Attack Patterns"]=capec["Related Attack Patterns"]
        CAPEC_Node["Execution Flow"]=capec["Execution Flow"]
        CAPEC_Node["Prerequisites"]=capec["Prerequisites"]
        CAPEC_Node["Skills Required"]=capec["Skills Required"]
        CAPEC_Node["Resources Required"]=capec["Resources Required"]
        CAPEC_Node["Indicators"]=capec["Indicators"]
        CAPEC_Node["Consequences"]=capec["Consequences"]
        CAPEC_Node["Mitigations"]=capec["Mitigations"]
        CAPEC_Node["Example Instances"]=capec["Example Instances"]
        CAPEC_Node["Related Weaknesses"]=capec["Related Weaknesses"]
        CAPEC_Node["Taxonomy Mappings"]=capec["Taxonomy Mappings"]
        CAPEC_Node["Notes"]=capec["Notes"]
        KGraph.create(CAPEC_Node)

#####ATT&CK#######

jsonl_list=[]
matcher = NodeMatcher(KGraph)
datanames = os.listdir("ATT&CK")
for dataname in datanames:
    if os.path.splitext(dataname)[1] == '.jsonl':#目录下包含.json的文件
        print(dataname)
        jsonl_list.append(dataname)

for jl in jsonl_list:
    if(jl=="ttps.jsonl"):
        continue
    with open("ATT&CK\\"+jl,"r",encoding="utf-8") as f:
        ATTACK_items=json.loads(f.read())
        # print(ATTACK_items)

        TID=ATTACK_items["TTP_id"]
        TID_unique=TID.split("-")[-1]

        result = matcher.match('ATT&CK',name=TID_unique).all()
        if(len(result)>0):
            continue

        ATTACK_Node = Node("ATT&CK", name=TID_unique)
        ATTACK_Node["TTP_id_unique"]=TID_unique
        ATTACK_Node["TTP_id"]=ATTACK_items["TTP_id"]
        ATTACK_Node["TTP_name"]=ATTACK_items["TTP_name"]
        ATTACK_Node["Description"]=ATTACK_items["Description"]

        Property=""
        if "Property" in ATTACK_items.keys():
            for item,value in ATTACK_items["Property"].items():
                Property+=item+"#"+value+"$"
        ATTACK_Node["Property"]=Property[0:-1]

        Examples=""
        if "Examples" in ATTACK_items.keys():
            for item,value in ATTACK_items["Examples"].items():
                Examples+=item+"#"+value[0]+"#"+value[1]+"#"+value[2]+"$"
        ATTACK_Node["Examples"]=Examples[0:-1]

        Mitigation=""
        if "Mitigation" in ATTACK_items.keys():
            for item,value in ATTACK_items["Mitigation"].items():
                Mitigation+=item+"#"+value[0]+"#"+value[1]+"#"+value[2]+"$"
        ATTACK_Node["Mitigation"]=Mitigation[0:-1]

        Detection=""
        if "Detection" in ATTACK_items.keys():
            for item,value in ATTACK_items["Detection"].items():
                Detection+=item+"#"+value[0]+"#"+value[1]+"#"+value[2]+"#"+value[3]+"$"
        ATTACK_Node["Detection"]=Detection[0:-1]

        KGraph.create(ATTACK_Node)


##CAPEC-Relationship#####
matcher = NodeMatcher(KGraph)
result = matcher.match('CAPEC').all()

for node in result:
    relations=node["Related Attack Patterns"]
    relations_items=relations.split("::")
    for item in relations_items:
        if(item.strip()==""):
            continue

        relation=item.split(":")
        type=""
        r_type=""
        r_item=""
        for keyvalue in relation:
            if type=="NATURE":
                r_type=keyvalue
                type=""
            elif type=="CAPEC ID":
                r_item=keyvalue
                type=""

            type=keyvalue
        
        next_node = matcher.match('CAPEC',name=int(r_item)).first()
        
        relation1 = Relationship(node,r_type, next_node)
        KGraph.create(relation1)

        if r_type=="ChildOf":
            relation2 = Relationship(next_node,"ParentOf", node)
            KGraph.create(relation2)



####ATT&CK-Relationship#######
matcher = NodeMatcher(KGraph)
with open("ATT&CK/ttps.jsonl.bac") as f:
    ttps=json.loads(f.read())
    for Tac in ttps:
        
        Tac_ID=Tac.split(":")[0].strip()
        Clean_Tac_ID=Tac_ID.split("-")[-1].strip()
        Tac_node=matcher.match('ATT&CK',name=Clean_Tac_ID).first()
        Tac_node.add_label("Tactics")
        KGraph.push(Tac_node)

        teches=ttps[Tac][1]
        if len(teches)>0:
            for tech in teches:
                tech_ID=tech.split(":")[0]
                Clean_tech_ID=tech_ID.split("-")[-1].strip()
                Tech_node=matcher.match('ATT&CK',name=Clean_tech_ID).first()
                Tech_node.add_label("Technique")
                KGraph.push(Tech_node)

                relation1=Relationship(Tac_node,"Contains",Tech_node)
                relation2=Relationship(Tech_node,"TacticOf",Tac_node)
                KGraph.create(relation1)
                KGraph.create(relation2)

                proced=teches[tech][1]
                if len(proced)>0:
                    for pd in proced:
                        # print(pd)
                        pd_ID=pd.split(":")[0]
                        Clean_pd_ID=pd_ID.split("-")[-1].strip()
                        pd_Node=matcher.match('ATT&CK',name=Clean_pd_ID).first()
                        pd_Node.add_label("Procedure")
                        KGraph.push(pd_Node)

                        relation1=Relationship(Tech_node,"Contains",pd_Node)
                        relation2=Relationship(pd_Node,"ProcedureOf",Tech_node)
                        KGraph.create(relation1)
                        KGraph.create(relation2)
        
#######CVE2CWE#######
matcher = NodeMatcher(KGraph)
result = matcher.match('CVE').all()

for node in result:
    CWE_info=node["CWE"]
    CWEes=CWE_info.split(":")
    for CWE in CWEes:
        if  CWE!="":
            CWE=CWE.replace("CWE-","")
            CWE_node=matcher.match('CWE',name=int(CWE)).first()
            if CWE_node==None:
                print("CWE-"+CWE+" Not found")
            else: 
                relation1=Relationship(node,"hasWeakness",CWE_node)
                KGraph.create(relation1)



#####CWE2CAPEC######
matcher = NodeMatcher(KGraph)
result = matcher.match('CAPEC').all()

for node in result:
    CWEes=node["Related Weaknesses"]
    for CWE in CWEes.split("::"):
        if CWE !="":
            CWE_node=matcher.match('CWE',name=int(CWE)).first()
            if CWE_node==None:
                print("CWE-"+CWE+" Not found")  
            else:
                relation1=Relationship(CWE_node,"CWE2CAPEC",node)
                relation2=Relationship(node,"CAPEC2CWE",CWE_node)
                KGraph.create(relation1)
                KGraph.create(relation2)




#####CAPEC2ATT&CK######
matcher = NodeMatcher(KGraph)
result = matcher.match('CAPEC').all()

for node in result:
    TTPs=node["Taxonomy Mappings"]
    mapping_items=TTPs.split("::")
    for item in mapping_items:
        if(item.strip()==""):
            continue

        mapping=item.split(":")
        type=""
        r_type=""
        r_item=""
        for keyvalue in mapping:
            if type=="TAXONOMY NAME":
                r_type=keyvalue
                type=""
            elif type=="ENTRY ID":
                r_item=keyvalue
                type=""
                if r_type=="ATTACK":
                    break
            type=keyvalue
        
        if r_type=="ATTACK" and r_item!="":
            ttpnodes = matcher.match("ATT&CK").where("_.TTP_id Contains '"+r_item+"'").all() 
            for ttpnode in ttpnodes:
                relationship1=Relationship(node,"CAPEC2ATTACK",ttpnode)
                relationship2=Relationship(ttpnode,"ATTACK2CAPEC",node)
                KGraph.create(relationship1)
                KGraph.create(relationship2)
        
    
#####ATT&CK2CAPEC######
matcher = NodeMatcher(KGraph)
result = matcher.match('ATT&CK').all()

for node in result:
    if "Property" in node:
        if "CAPEC ID" in node["Property"]:
            CAPEC_info=node["Property"]
            CAPEC_info=CAPEC_info.split("$")
            CAPEC_l=[]
            try:
                for item in CAPEC_info:
                    isCAPEC=item.split("#")
                    if "CAPEC" in isCAPEC[0]:
                        CAPEC_l.append(isCAPEC[1])
            except Exception:
                print("CAPEC in ATT&CK error "+node["Property"])
            
            for CAPEC in CAPEC_l:
                CAPEC_res=CAPEC.split(",")
                for Capec in CAPEC_res:
                    Capec=Capec.strip().split("-")[1]
                    capecnode=matcher.match('CAPEC',name=int(Capec)).first()

                    if capecnode==None:
                        print("CAPEC-"+Capec+" Not found")  
                    else:
                        relationship1=Relationship(node,"ATTACK2CAPEC",capecnode)
                        relationship2=Relationship(capecnode,"CAPEC2ATTACK",node)

                        KGraph.create(relationship1)
                        KGraph.create(relationship2)

                