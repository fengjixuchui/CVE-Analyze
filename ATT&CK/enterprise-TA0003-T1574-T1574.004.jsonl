{"TTP_id": "enterprise-TA0003-T1574-T1574.004", "TTP_name": "Dylib Hijacking", "Description": "Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable. Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.[1][2][3][4] Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.[5][6][7]", "Property": {"ID": "T1574.004", "Sub-technique of": "T1574", "Tactics": "Persistence, Privilege Escalation, Defense Evasion", "Platforms": "macOS", "Defense Bypassed": "Application Control", "CAPEC ID": "CAPEC-471", "Version": "2.0", "Created": "16 March 2020", "Last Modified": "05 May 2022"}, "Examples": {"S0363": ["https://attack.mitre.org/software/S0363", "Empire", "Empire has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application.[8]"]}, "Mitigation": {"M1022": ["https://attack.mitre.org/mitigations/M1022", "Restrict File and Directory Permissions", "Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard dylib folders."]}, "Detection": {"File Creation": ["Monitor for newly constructed dylibs", "DS0022", "https://attack.mitre.org/datasources/DS0022", "File"], "File Modification": ["Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process.", "", "", ""], "Module Load": ["Monitor for dynamic libraries being loaded. Run path dependent libraries can include LC_LOAD_DYLIB, LC_LOAD_WEAK_DYLIB, and LC_RPATH. Other special keywords are recognized by the macOS loader are @rpath, @loader_path, and @executable_path.[9] These loader instructions can be examined for individual binaries or frameworks using the otool -l command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking", "DS0011", "https://attack.mitre.org/datasources/DS0011", "Module"]}}
