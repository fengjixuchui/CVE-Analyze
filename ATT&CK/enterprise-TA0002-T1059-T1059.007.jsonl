{"TTP_id": "enterprise-TA0002-T1059-T1059.007", "TTP_name": "JavaScript", "Description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.[1]JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.[2][3][4]JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility osascript, they can be compiled into applications or script files via osacompile, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.[5][6][7][8][9]Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.", "Property": {"ID": "T1059.007", "Sub-technique of": "T1059", "Tactic": "Execution", "Platforms": "Linux, Windows, macOS", "Permissions Required": "Administrator, SYSTEM, User", "Contributors": "Cody Thomas, SpecterOps", "Version": "2.1", "Created": "23 June 2020", "Last Modified": "16 August 2021"}, "Examples": {"S0622": ["https://attack.mitre.org/software/S0622", "AppleSeed", "AppleSeed has the ability to use JavaScript to execute PowerShell.[10]"], "G0050": ["https://attack.mitre.org/groups/G0050", "APT32", "APT32 has used JavaScript for drive-by downloads and C2 communications.[11][12]"], "S0373": ["https://attack.mitre.org/software/S0373", "Astaroth", "Astaroth uses JavaScript to perform its core functionalities. [13][14]"], "S0640": ["https://attack.mitre.org/software/S0640", "Avaddon", "Avaddon has been executed through a malicious JScript downloader.[15][16]"], "S0482": ["https://attack.mitre.org/software/S0482", "Bundlore", "Bundlore can execute JavaScript by injecting it into the victim's browser.[17]"], "S0631": ["https://attack.mitre.org/software/S0631", "Chaes", "Chaes has used JavaScript and Node.Js information stealer script that exfiltrates data using the node process.[18]"], "G0080": ["https://attack.mitre.org/groups/G0080", "Cobalt Group", "Cobalt Group has executed JavaScript scriptlets on the victim's machine.[19][20][21][22][23][24]"], "S0154": ["https://attack.mitre.org/software/S0154", "Cobalt Strike", "The Cobalt Strike System Profiler can use JavaScript to perform reconnaissance actions.[25]"], "S0673": ["https://attack.mitre.org/software/S0673", "DarkWatchman", "DarkWatchman uses JavaScript to perform its core functionalities.[26]"], "S0695": ["https://attack.mitre.org/software/S0695", "Donut", "Donut can generate shellcode outputs that execute via JavaScript or JScript.[27]"], "S0634": ["https://attack.mitre.org/software/S0634", "EnvyScout", "EnvyScout can write files to disk with JavaScript using a modified version of the open-source tool FileSaver.[28]"], "G0120": ["https://attack.mitre.org/groups/G0120", "Evilnum", "Evilnum has used malicious JavaScript files on the victim's machine.[29]"], "G0037": ["https://attack.mitre.org/groups/G0037", "FIN6", "FIN6 has used malicious JavaScript to steal payment card data from e-commerce sites.[30]"], "G0046": ["https://attack.mitre.org/groups/G0046", "FIN7", "FIN7 used JavaScript scripts to help perform tasks on the victim's machine.[31][32][31]"], "S0417": ["https://attack.mitre.org/software/S0417", "GRIFFON", "GRIFFON is written in and executed as JavaScript.[33]"], "G0126": ["https://attack.mitre.org/groups/G0126", "Higaisa", "Higaisa used JavaScript to execute additional files.[34][35][36]"], "G0119": ["https://attack.mitre.org/groups/G0119", "Indrik Spider", "Indrik Spider has used malicious JavaScript files for several components of their attack.[37]"], "S0260": ["https://attack.mitre.org/software/S0260", "InvisiMole", "InvisiMole can use a JavaScript file as part of its execution chain.[38]"], "S0283": ["https://attack.mitre.org/software/S0283", "jRAT", "jRAT has been distributed as HTA files with JScript.[39]"], "S0648": ["https://attack.mitre.org/software/S0648", "JSS Loader", "JSS Loader can download and execute JavaScript files.[40]"], "G0094": ["https://attack.mitre.org/groups/G0094", "Kimsuky", "Kimsuky has used JScript for logging and downloading additional tools.[41][42]"], "S0356": ["https://attack.mitre.org/software/S0356", "KONNI", "KONNI has executed malicious JavaScript code.[43]"], "G0140": ["https://attack.mitre.org/groups/G0140", "LazyScripter", "LazyScripter has used JavaScript in its attacks.[44]"], "G0077": ["https://attack.mitre.org/groups/G0077", "Leafminer", "Leafminer infected victims using JavaScript code.[45]"], "S0455": ["https://attack.mitre.org/software/S0455", "Metamorfo", "Metamorfo includes payloads written in JavaScript.[46]"], "G0021": ["https://attack.mitre.org/groups/G0021", "Molerats", "Molerats used various implants, including those built with JS, on target machines.[47]"], "G0069": ["https://attack.mitre.org/groups/G0069", "MuddyWater", "MuddyWater has used JavaScript files to execute its POWERSTATS payload.[48][49]"], "S0228": ["https://attack.mitre.org/software/S0228", "NanHaiShu", "NanHaiShu executes additional Jscript code on the victim's machine.[50]"], "S0223": ["https://attack.mitre.org/software/S0223", "POWERSTATS", "POWERSTATS can use JavaScript code for execution.[48]"], "S0650": ["https://attack.mitre.org/software/S0650", "QakBot", "The QakBot web inject module can inject Java Script into web banking pages visited by the victim.[51]"], "G0121": ["https://attack.mitre.org/groups/G0121", "Sidewinder", "Sidewinder has used JavaScript to drop and execute malware loaders.[52][53]"], "G0091": ["https://attack.mitre.org/groups/G0091", "Silence", "Silence has used JS scripts.[54]"], "S0646": ["https://attack.mitre.org/software/S0646", "SpicyOmelette", "SpicyOmelette has the ability to execute arbitrary JavaScript code on a compromised host.[55]"], "G0092": ["https://attack.mitre.org/groups/G0092", "TA505", "TA505 has used JavaScript for code execution.[56][57]"], "G0010": ["https://attack.mitre.org/groups/G0010", "Turla", "Turla has used various JavaScript-based backdoors.[58]"], "S0476": ["https://attack.mitre.org/software/S0476", "Valak", "Valak can execute JavaScript containing configuration data for establishing persistence.[59]"], "S0341": ["https://attack.mitre.org/software/S0341", "Xbash", "Xbash can execute malicious JavaScript payloads on the victim’s machine.[60]"]}, "Mitigation": {"M1040": ["https://attack.mitre.org/mitigations/M1040", "Behavior Prevention on Endpoint", "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent JavaScript scripts from executing potentially malicious downloaded content [61]."], "M1042": ["https://attack.mitre.org/mitigations/M1042", "Disable or Remove Feature or Program", "Turn off or restrict access to unneeded scripting components."], "M1038": ["https://attack.mitre.org/mitigations/M1038", "Execution Prevention", "Denylist scripting where appropriate."], "M1021": ["https://attack.mitre.org/mitigations/M1021", "Restrict Web-Based Content", "Script blocking extensions can help prevent the execution of JavaScript and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."]}, "Detection": {"Command Execution": ["Scripting execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other programmable post-compromise behaviors and could be used as indicators of detection leading back to the source. Monitor for execution of JXA through osascript and usage of OSAScript API that may be related to other suspicious behavior occurring on the system.", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "Module Load": ["Monitor for the loading of modules associated with scripting languages (ex: JScript.dll).", "DS0011", "https://attack.mitre.org/datasources/DS0011", "Module"], "Process Creation": ["Monitor for events associated with scripting execution, such as process activity, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving scripts", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Script Execution": ["Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.", "DS0012", "https://attack.mitre.org/datasources/DS0012", "Script"]}}
