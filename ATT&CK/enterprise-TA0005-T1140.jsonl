{"TTP_id": "enterprise-TA0005-T1140", "TTP_name": "Deobfuscate/Decode Files or Information", "Description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. [1] Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload. [2]Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. [3]", "Property": {"ID": "T1140", "Sub-techniques": "No sub-techniques", "Tactic": "Defense Evasion", "Platforms": "Linux, Windows, macOS", "Defense Bypassed": "Anti-virus, Host Intrusion Prevention Systems, Network Intrusion Detection System, Signature-based Detection", "Contributors": "Matthew Demaske, Adaptforward; Red Canary", "Version": "1.1", "Created": "14 December 2017", "Last Modified": "05 May 2022"}, "Examples": {"S0469": ["https://attack.mitre.org/software/S0469", "ABK", "ABK has the ability to decrypt AES encrypted payloads.[4]"], "S0331": ["https://attack.mitre.org/software/S0331", "Agent Tesla", "Agent Tesla has the ability to decrypt strings encrypted with the Rijndael symmetric encryption algorithm.[5]"], "S0584": ["https://attack.mitre.org/software/S0584", "AppleJeus", "AppleJeus has decoded files received from a C2.[6]"], "S0622": ["https://attack.mitre.org/software/S0622", "AppleSeed", "AppleSeed can decode its payload prior to execution.[7]"], "G0073": ["https://attack.mitre.org/groups/G0073", "APT19", "An APT19 HTTP malware variant decrypts strings using single-byte XOR keys.[8]"], "G0007": ["https://attack.mitre.org/groups/G0007", "APT28", "An APT28 macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload.[9][10]"], "G0016": ["https://attack.mitre.org/groups/G0016", "APT29", "APT29 used 7-Zip to decode its Raindrop malware.[11]"], "G0087": ["https://attack.mitre.org/groups/G0087", "APT39", "APT39 has used malware to decrypt encrypted CAB files.[12]"], "S0456": ["https://attack.mitre.org/software/S0456", "Aria-body", "Aria-body has the ability to decrypt the loader configuration and payload DLL.[13]"], "S0373": ["https://attack.mitre.org/software/S0373", "Astaroth", "Astaroth uses a fromCharCode() deobfuscation method to avoid explicitly writing execution commands and to hide its code. [14][15]"], "S0347": ["https://attack.mitre.org/software/S0347", "AuditCred", "AuditCred uses XOR and RC4 to perform decryption on the code functions.[16]"], "S0640": ["https://attack.mitre.org/software/S0640", "Avaddon", "Avaddon has decrypted encrypted strings.[17]"], "S0473": ["https://attack.mitre.org/software/S0473", "Avenger", "Avenger has the ability to decrypt files downloaded from C2.[4]"], "S0344": ["https://attack.mitre.org/software/S0344", "Azorult", "Azorult uses an XOR key to decrypt content and uses Base64 to decode the C2 address.[18][19]"], "S0638": ["https://attack.mitre.org/software/S0638", "Babuk", "Babuk has the ability to unpack itself into memory using XOR.[20][21]"], "S0414": ["https://attack.mitre.org/software/S0414", "BabyShark", "BabyShark has the ability to decode downloaded files prior to execution.[22]"], "S0475": ["https://attack.mitre.org/software/S0475", "BackConfig", "BackConfig has used a custom routine to decrypt strings.[23]"], "S0642": ["https://attack.mitre.org/software/S0642", "BADFLICK", "BADFLICK can decode shellcode using a custom rotating XOR cipher.[24]"], "S0234": ["https://attack.mitre.org/software/S0234", "Bandook", "Bandook has decoded its PowerShell script.[25]"], "S0239": ["https://attack.mitre.org/software/S0239", "Bankshot", "Bankshot decodes embedded XOR strings.[26]"], "S0534": ["https://attack.mitre.org/software/S0534", "Bazar", "Bazar can decrypt downloaded payloads. Bazar also resolves strings and API calls at runtime.[27][28]"], "S0470": ["https://attack.mitre.org/software/S0470", "BBK", "BBK has the ability to decrypt AES encrypted payloads.[4]"], "S0127": ["https://attack.mitre.org/software/S0127", "BBSRAT", "BBSRAT uses Expand to decompress a CAB file into executable content.[29]"], "S0574": ["https://attack.mitre.org/software/S0574", "BendyBear", "BendyBear has decrypted function blocks using a XOR key during runtime to evade detection.[30]"], "S0268": ["https://attack.mitre.org/software/S0268", "Bisonal", "Bisonal has decoded strings in the malware using XOR and RC4.[31][32]"], "S0520": ["https://attack.mitre.org/software/S0520", "BLINDINGCAN", "BLINDINGCAN has used AES and XOR to decrypt its DLLs.[33]"], "S0635": ["https://attack.mitre.org/software/S0635", "BoomBox", "BoomBox can decrypt AES-encrypted files downloaded from C2.[34]"], "S0415": ["https://attack.mitre.org/software/S0415", "BOOSTWRITE", "BOOSTWRITE has used a a 32-byte long multi-XOR key to decode data inside its payload.[35]"], "G0060": ["https://attack.mitre.org/groups/G0060", "BRONZE BUTLER", "BRONZE BUTLER downloads encoded payloads and decodes them on the victim.[36]"], "S0482": ["https://attack.mitre.org/software/S0482", "Bundlore", "Bundlore has used openssl to decrypt AES encrypted payload data. Bundlore has also used base64 and RC4 with a hardcoded key to deobfuscate data.[37]"], "S0335": ["https://attack.mitre.org/software/S0335", "Carbon", "Carbon decrypts task and configuration files for execution.[38][39]"], "S0348": ["https://attack.mitre.org/software/S0348", "Cardinal RAT", "Cardinal RAT decodes many of its artifacts and is decrypted (AES-128) after being downloaded.[40]"], "S0160": ["https://attack.mitre.org/software/S0160", "certutil", "certutil has been used to decode binaries hidden inside certificate files as Base64 information.[1]"], "S0631": ["https://attack.mitre.org/software/S0631", "Chaes", "Chaes has decrypted an AES encrypted binary file to trigger the download of other files.[41]"], "S0674": ["https://attack.mitre.org/software/S0674", "CharmPower", "CharmPower can decrypt downloaded modules prior to execution.[42]"], "S0667": ["https://attack.mitre.org/software/S0667", "Chrommme", "Chrommme can decrypt its encrypted internal code.[43]"], "S0660": ["https://attack.mitre.org/software/S0660", "Clambling", "Clambling can deobfuscate its payload prior to execution.[44][45]"], "S0611": ["https://attack.mitre.org/software/S0611", "Clop", "Clop has used a simple XOR operation to decrypt strings.[46]"], "S0154": ["https://attack.mitre.org/software/S0154", "Cobalt Strike", "Cobalt Strike can deobfuscate shellcode using a rolling XOR and decrypt metadata from Beacon sessions.[47][48]"], "S0369": ["https://attack.mitre.org/software/S0369", "CoinTicker", "CoinTicker decodes the initially-downloaded hidden encoded file using OpenSSL.[49]"], "S0126": ["https://attack.mitre.org/software/S0126", "ComRAT", "ComRAT has used unique per machine passwords to decrypt the orchestrator payload and a hardcoded XOR key to decrypt its communications module. ComRAT has also used a unique password to decrypt the file used for its hidden file system.[50][51]"], "S0575": ["https://attack.mitre.org/software/S0575", "Conti", "Conti has decrypted its payload using a hardcoded AES-256 key.[52][53]"], "S0492": ["https://attack.mitre.org/software/S0492", "CookieMiner", "CookieMiner has used Google Chrome's decryption and extraction operations.[54]"], "S0614": ["https://attack.mitre.org/software/S0614", "CostaBricks", "CostaBricks has the ability to use bytecode to decrypt embedded payloads.[55]"], "S0115": ["https://attack.mitre.org/software/S0115", "Crimson", "Crimson can decode its encoded PE file prior to execution.[56]"], "S0687": ["https://attack.mitre.org/software/S0687", "Cyclops Blink", "Cyclops Blink can decrypt and parse instructions sent from C2.[57]"], "G0012": ["https://attack.mitre.org/groups/G0012", "Darkhotel", "Darkhotel has decrypted strings and imports using RC4 during execution.[58][59]"], "S0673": ["https://attack.mitre.org/software/S0673", "DarkWatchman", "DarkWatchman has the ability to self-extract as a RAR archive.[60]"], "S0255": ["https://attack.mitre.org/software/S0255", "DDKONG", "DDKONG decodes an embedded configuration using XOR.[61]"], "S0354": ["https://attack.mitre.org/software/S0354", "Denis", "Denis will decrypt important strings used for C&C communication.[62]"], "S0547": ["https://attack.mitre.org/software/S0547", "DropBook", "DropBook can unarchive data downloaded from the C2 to obtain the payload and persistence modules.[63]"], "S0502": ["https://attack.mitre.org/software/S0502", "Drovorub", "Drovorub has de-obsfuscated XOR encrypted payloads in WebSocket messages.[64]"], "S0567": ["https://attack.mitre.org/software/S0567", "Dtrack", "Dtrack has used a decryption routine that is part of an executable physical patch.[65]"], "S0024": ["https://attack.mitre.org/software/S0024", "Dyre", "Dyre decrypts resources needed for targeting the victim.[66][67]"], "S0377": ["https://attack.mitre.org/software/S0377", "Ebury", "Ebury has verified C2 domain ownership by decrypting the TXT record using an embedded RSA public key.[68]"], "S0624": ["https://attack.mitre.org/software/S0624", "Ecipekac", "Ecipekac has the ability to decrypt fileless loader modules.[69]"], "S0554": ["https://attack.mitre.org/software/S0554", "Egregor", "Egregor has been decrypted before execution.[70][71]"], "S0634": ["https://attack.mitre.org/software/S0634", "EnvyScout", "EnvyScout can deobfuscate and write malicious ISO files to disk.[34]"], "S0401": ["https://attack.mitre.org/software/S0401", "Exaramel for Linux", "Exaramel for Linux can decrypt its configuration file.[72]"], "S0361": ["https://attack.mitre.org/software/S0361", "Expand", "Expand can be used to decompress a local or remote CAB file into an executable.[73]"], "S0512": ["https://attack.mitre.org/software/S0512", "FatDuke", "FatDuke can decrypt AES encrypted C2 communications.[74]"], "S0355": ["https://attack.mitre.org/software/S0355", "Final1stspy", "Final1stspy uses Python code to deobfuscate base64-encoded strings.[75]"], "S0182": ["https://attack.mitre.org/software/S0182", "FinFisher", "FinFisher extracts and decrypts stage 3 malware, which is stored in encrypted resources.[76][77]"], "S0618": ["https://attack.mitre.org/software/S0618", "FIVEHANDS", "FIVEHANDS has the ability to decrypt its payload prior to execution.[78][79][80]"], "S0661": ["https://attack.mitre.org/software/S0661", "FoggyWeb", "FoggyWeb can be decrypted in memory using a Lightweight Encryption Algorithm (LEA)-128 key and decoded using a XOR key.[81]"], "G0101": ["https://attack.mitre.org/groups/G0101", "Frankenstein", "Frankenstein has deobfuscated base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload.[82]"], "S0628": ["https://attack.mitre.org/software/S0628", "FYAnti", "FYAnti has the ability to decrypt an embedded .NET module.[69]"], "G0047": ["https://attack.mitre.org/groups/G0047", "Gamaredon Group", "Gamaredon Group tools decrypted additional payloads from the C2. Gamaredon Group has also decoded base64-encoded source code of a downloader.[83][84]"], "S0666": ["https://attack.mitre.org/software/S0666", "Gelsemium", "Gelsemium can decompress and decrypt DLLs and shellcode.[43]"], "S0032": ["https://attack.mitre.org/software/S0032", "gh0st RAT", "gh0st RAT has decrypted and loaded the gh0st RAT DLL into memory, once the initial dropper executable is launched.[85]"], "S0588": ["https://attack.mitre.org/software/S0588", "GoldMax", "GoldMax has decoded and decrypted the configuration file when executed.[86][87]"], "S0477": ["https://attack.mitre.org/software/S0477", "Goopy", "Goopy has used a polymorphic decryptor to decrypt itself at runtime.[62]"], "G0078": ["https://attack.mitre.org/groups/G0078", "Gorgon Group", "Gorgon Group malware can decode contents from a payload that was Base64 encoded and write the contents to a file.[88]"], "S0531": ["https://attack.mitre.org/software/S0531", "Grandoreiro", "Grandoreiro can decrypt its encrypted internal strings.[89]"], "S0690": ["https://attack.mitre.org/software/S0690", "Green Lambert", "Green Lambert can use multiple custom routines to decrypt strings prior to execution.[90][91]"], "S0632": ["https://attack.mitre.org/software/S0632", "GrimAgent", "GrimAgent can use a decryption algorithm for strings based on Rotate on Right (RoR) and Rotate on Left (RoL) functionality.[92]"], "S0499": ["https://attack.mitre.org/software/S0499", "Hancitor", "Hancitor has decoded Base64 encoded URLs to insert a recipient’s name into the filename of the Word document. Hancitor has also extracted executables from ZIP files.[93][94]"], "S0697": ["https://attack.mitre.org/software/S0697", "HermeticWiper", "HermeticWiper can decompress and copy driver files using LZCopy.[95]"], "S0394": ["https://attack.mitre.org/software/S0394", "HiddenWasp", "HiddenWasp uses a cipher to implement a decoding function.[96]"], "G0126": ["https://attack.mitre.org/groups/G0126", "Higaisa", "Higaisa used certutil to decode Base64 binaries at runtime and a 16-byte XOR key to decrypt data.[97][98]"], "S0601": ["https://attack.mitre.org/software/S0601", "Hildegard", "Hildegard has decrypted ELF files with AES.[99]"], "G0072": ["https://attack.mitre.org/groups/G0072", "Honeybee", "Honeybee drops a Word file containing a Base64-encoded file in it that is read, decoded, and dropped to the disk by the macro.[100]"], "S0398": ["https://attack.mitre.org/software/S0398", "HyperBro", "HyperBro can unpack and decrypt its payload prior to execution.[44][101]"], "S0434": ["https://attack.mitre.org/software/S0434", "Imminent Monitor", "Imminent Monitor has decoded malware components that are then dropped to the system.[102]"], "S0604": ["https://attack.mitre.org/software/S0604", "Industroyer", "Industroyer decrypts code to connect to a remote C2 server.[103]"], "S0260": ["https://attack.mitre.org/software/S0260", "InvisiMole", "InvisiMole can decrypt, unpack and load a DLL from its resources, or from blobs encrypted with Data Protection API, two-key triple DES, and variations of the XOR cipher.[104][105]"], "S0581": ["https://attack.mitre.org/software/S0581", "IronNetInjector", "IronNetInjector has the ability to decrypt embedded .NET and PE payloads.[106]"], "S0189": ["https://attack.mitre.org/software/S0189", "ISMInjector", "ISMInjector uses the certutil command to decode a payload file.[107]"], "G0004": ["https://attack.mitre.org/groups/G0004", "Ke3chang", "Ke3chang has deobfuscated Base64-encoded shellcode strings prior to loading them.[108]"], "S0585": ["https://attack.mitre.org/software/S0585", "Kerrdown", "Kerrdown can decode, decrypt, and decompress multiple layers of shellcode.[109]"], "S0487": ["https://attack.mitre.org/software/S0487", "Kessel", "Kessel has decrypted the binary's configuration once the main function was launched.[110]"], "S0526": ["https://attack.mitre.org/software/S0526", "KGH_SPY", "KGH_SPY can decrypt encrypted strings and write them to a newly created folder.[111]"], "G0094": ["https://attack.mitre.org/groups/G0094", "Kimsuky", "Kimsuky has decoded malicious VBScripts using Base64.[112]"], "S0641": ["https://attack.mitre.org/software/S0641", "Kobalos", "Kobalos decrypts strings right after the initial communication, but before the authentication process.[113]"], "S0669": ["https://attack.mitre.org/software/S0669", "KOCTOPUS", "KOCTOPUS has deobfuscated itself before executing its commands.[114]"], "S0356": ["https://attack.mitre.org/software/S0356", "KONNI", "KONNI has used certutil to download and decode base64 encoded strings and has also devoted a custom section to performing all the components of the deobfuscation process.[115][116]"], "S0236": ["https://attack.mitre.org/software/S0236", "Kwampirs", "Kwampirs decrypts and extracts a copy of its main DLL payload when executing.[117]"], "G0032": ["https://attack.mitre.org/groups/G0032", "Lazarus Group", "Lazarus Group has used shellcode within macros to decrypt and manually map DLLs and shellcode into memory at runtime.[118][119]"], "G0065": ["https://attack.mitre.org/groups/G0065", "Leviathan", "Leviathan has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.[120]"], "S0395": ["https://attack.mitre.org/software/S0395", "LightNeuron", "LightNeuron has used AES and XOR to decrypt configuration files and commands.[121]"], "S0513": ["https://attack.mitre.org/software/S0513", "LiteDuke", "LiteDuke has the ability to decrypt and decode multiple layers of obfuscation.[74]"], "S0681": ["https://attack.mitre.org/software/S0681", "Lizar", "Lizar can decrypt its configuration data.[122]"], "S0447": ["https://attack.mitre.org/software/S0447", "Lokibot", "Lokibot has decoded and decrypted its stages multiple times using hard-coded keys to deliver the final payload, and has decoded its server response hex string using XOR.[123]"], "S0582": ["https://attack.mitre.org/software/S0582", "LookBack", "LookBack has a function that decrypts malicious data.[124]"], "S0532": ["https://attack.mitre.org/software/S0532", "Lucifer", "Lucifer can decrypt its C2 address upon execution.[125]"], "S0409": ["https://attack.mitre.org/software/S0409", "Machete", "Machete’s downloaded data is decrypted using AES.[126]"], "S0576": ["https://attack.mitre.org/software/S0576", "MegaCortex", "MegaCortex has used a Base64 key to decode its components.[127]"], "G0045": ["https://attack.mitre.org/groups/G0045", "menuPass", "menuPass has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used certutil -decode to decode files on the victim’s machine when dropping UPPERCUT.[128][129]"], "S0443": ["https://attack.mitre.org/software/S0443", "MESSAGETAP", "After checking for the existence of two files, keyword_parm.txt and parm.txt, MESSAGETAP XOR decodes and read the contents of the files. [130]"], "S0455": ["https://attack.mitre.org/software/S0455", "Metamorfo", "Upon execution, Metamorfo has unzipped itself after being downloaded to the system and has performed string decryption.[131][132][133]"], "S0280": ["https://attack.mitre.org/software/S0280", "MirageFox", "MirageFox has a function for decrypting data containing C2 configuration information.[134]"], "G0021": ["https://attack.mitre.org/groups/G0021", "Molerats", "Molerats decompresses ZIP files once on the victim machine.[135]"], "S0284": ["https://attack.mitre.org/software/S0284", "More_eggs", "More_eggs will decode malware components that are then dropped to the system.[136]"], "G0069": ["https://attack.mitre.org/groups/G0069", "MuddyWater", "MuddyWater decoded base64-encoded PowerShell commands using a VBS file.[137][138][139]"], "S0637": ["https://attack.mitre.org/software/S0637", "NativeZone", "NativeZone can decrypt and decode embedded Cobalt Strike beacon stage shellcode.[34]"], "S0457": ["https://attack.mitre.org/software/S0457", "Netwalker", "Netwalker's PowerShell script can decode and decrypt multiple layers of obfuscation, leading to the Netwalker DLL being loaded into memory.[140]"], "S0353": ["https://attack.mitre.org/software/S0353", "NOKKI", "NOKKI uses a unique, custom de-obfuscation technique.[141]"], "G0049": ["https://attack.mitre.org/groups/G0049", "OilRig", "A OilRig macro has run a PowerShell command to decode file contents. OilRig has also used certutil to decode base64-encoded files on victims.[142][107][143][144]"], "S0439": ["https://attack.mitre.org/software/S0439", "Okrum", "Okrum's loader can decrypt the backdoor code, embedded within the loader or within a legitimate PNG file. A custom XOR cipher or RC4 is used for decryption.[145]"], "S0052": ["https://attack.mitre.org/software/S0052", "OnionDuke", "OnionDuke can use a custom decryption algorithm to decrypt strings.[74]"], "S0264": ["https://attack.mitre.org/software/S0264", "OopsIE", "OopsIE concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.[143]"], "S0402": ["https://attack.mitre.org/software/S0402", "OSX/Shlayer", "OSX/Shlayer can base64-decode and AES-decrypt downloaded payloads.[146] Versions of OSX/Shlayer pass encrypted and password-protected code to openssl and then write the payload to the /tmp folder.[147][148]"], "S0598": ["https://attack.mitre.org/software/S0598", "P.A.S. Webshell", "P.A.S. Webshell can use a decryption mechanism to process a user supplied password and allow execution.[72]"], "S0517": ["https://attack.mitre.org/software/S0517", "Pillowmint", "Pillowmint has been decompressed by included shellcode prior to being launched.[149]"], "S0501": ["https://attack.mitre.org/software/S0501", "PipeMon", "PipeMon can decrypt password-protected executables.[150]"], "S0013": ["https://attack.mitre.org/software/S0013", "PlugX", "PlugX decompresses and decrypts itself using the Microsoft API call RtlDecompressBuffer.[151][44][152]"], "S0428": ["https://attack.mitre.org/software/S0428", "PoetRAT", "PoetRAT has used LZMA and base64 libraries to decode obfuscated scripts.[153]"], "S0518": ["https://attack.mitre.org/software/S0518", "PolyglotDuke", "PolyglotDuke can use a custom algorithm to decrypt strings used by the malware.[74]"], "S0223": ["https://attack.mitre.org/software/S0223", "POWERSTATS", "POWERSTATS can deobfuscate the main backdoor code.[139]"], "S0279": ["https://attack.mitre.org/software/S0279", "Proton", "Proton uses an encrypted file to store commands and configuration values.[154]"], "S0613": ["https://attack.mitre.org/software/S0613", "PS1", "PS1 can use an XOR key to decrypt a PowerShell loader and payload binary.[55]"], "S0147": ["https://attack.mitre.org/software/S0147", "Pteranodon", "Pteranodon can decrypt encrypted data strings prior to using them.[155]"], "S0196": ["https://attack.mitre.org/software/S0196", "PUNCHBUGGY", "PUNCHBUGGY has used PowerShell to decode base64-encoded assembly.[156]"], "S0650": ["https://attack.mitre.org/software/S0650", "QakBot", "QakBot can deobfuscate and re-assemble code strings for execution.[157][158][159]"], "S0269": ["https://attack.mitre.org/software/S0269", "QUADAGENT", "QUADAGENT uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.[160]"], "S0565": ["https://attack.mitre.org/software/S0565", "Raindrop", "Raindrop decrypted its Cobalt Strike payload using an AES-256 encryption algorithm in CBC mode with a unique key per sample.[11][161]"], "S0629": ["https://attack.mitre.org/software/S0629", "RainyDay", "RainyDay can decrypt its payload via a XOR key.[162]"], "S0458": ["https://attack.mitre.org/software/S0458", "Ramsay", "Ramsay can extract its agent from the body of a malicious document.[163]"], "S0495": ["https://attack.mitre.org/software/S0495", "RDAT", "RDAT can deobfuscate the base64-encoded and AES-encrypted files downloaded from the C2 server.[164]"], "S0511": ["https://attack.mitre.org/software/S0511", "RegDuke", "RegDuke can decrypt strings with a key either stored in the Registry or hardcoded in the code.[74]"], "S0375": ["https://attack.mitre.org/software/S0375", "Remexi", "Remexi decrypts the configuration data using XOR with 25-character keys.[165]"], "S0496": ["https://attack.mitre.org/software/S0496", "REvil", "REvil can decode encrypted strings to enable execution of commands and payloads.[166][167][168][169][170][171]"], "S0258": ["https://attack.mitre.org/software/S0258", "RGDoor", "RGDoor decodes Base64 strings and decrypts strings using a custom XOR algorithm.[172]"], "S0448": ["https://attack.mitre.org/software/S0448", "Rising Sun", "Rising Sun decrypted itself using a single-byte XOR scheme. Additionally, Rising Sun can decrypt its configuration data at runtime.[173]"], "G0106": ["https://attack.mitre.org/groups/G0106", "Rocke", "Rocke has extracted tar.gz files after downloading them from a C2 server.[174]"], "S0270": ["https://attack.mitre.org/software/S0270", "RogueRobin", "RogueRobin decodes an embedded executable using base64 and decompresses it.[175]"], "S0240": ["https://attack.mitre.org/software/S0240", "ROKRAT", "ROKRAT can decrypt strings using the victim's hostname as the key.[176][177]"], "G0034": ["https://attack.mitre.org/groups/G0034", "Sandworm Team", "Sandworm Team's VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip.[178][179]"], "S0461": ["https://attack.mitre.org/software/S0461", "SDBbot", "SDBbot has the ability to decrypt and decompress its payload to enable code execution.[180][181]"], "S0596": ["https://attack.mitre.org/software/S0596", "ShadowPad", "ShadowPad has decrypted a binary blob to start execution.[182]"], "S0140": ["https://attack.mitre.org/software/S0140", "Shamoon", "Shamoon decrypts ciphertext using an XOR cipher and a base64-encoded string.[183]"], "S0546": ["https://attack.mitre.org/software/S0546", "SharpStage", "SharpStage has decompressed data received from the C2 server.[184]"], "S0444": ["https://attack.mitre.org/software/S0444", "ShimRat", "ShimRat has decompressed its core DLL using shellcode once an impersonated antivirus component was running on a system.[185]"], "S0589": ["https://attack.mitre.org/software/S0589", "Sibot", "Sibot can decrypt data received from a C2 and save to a file.[86]"], "S0610": ["https://attack.mitre.org/software/S0610", "SideTwist", "SideTwist can decode and decrypt messages received from C2.[186]"], "S0623": ["https://attack.mitre.org/software/S0623", "Siloscape", "Siloscape has decrypted the password of the C2 server with a simple byte by byte XOR. Siloscape also writes both an archive of Tor and the unzip binary to disk from data embedded within the payload using Visual Studio’s Resource Manager.[187]"], "S0468": ["https://attack.mitre.org/software/S0468", "Skidmap", "Skidmap has the ability to download, unpack, and decrypt tar.gz files .[188]"], "S0226": ["https://attack.mitre.org/software/S0226", "Smoke Loader", "Smoke Loader deobfuscates its code.[189]"], "S0615": ["https://attack.mitre.org/software/S0615", "SombRAT", "SombRAT can run upload to decrypt and upload files from storage.[55][79]"], "S0516": ["https://attack.mitre.org/software/S0516", "SoreFang", "SoreFang can decode and decrypt exfiltrated data sent to C2.[190]"], "S0543": ["https://attack.mitre.org/software/S0543", "Spark", "Spark has used a custom XOR algorithm to decrypt the payload.[191]"], "S0390": ["https://attack.mitre.org/software/S0390", "SQLRat", "SQLRat has scripts that are responsible for deobfuscating additional scripts.[192]"], "S0188": ["https://attack.mitre.org/software/S0188", "Starloader", "Starloader decrypts and executes shellcode from a file called Stars.jps.[193]"], "S0603": ["https://attack.mitre.org/software/S0603", "Stuxnet", "Stuxnet decrypts resources that are loaded into memory and executed.[194]"], "S0562": ["https://attack.mitre.org/software/S0562", "SUNSPOT", "SUNSPOT decrypts SUNBURST, which was stored in AES128-CBC encrypted blobs.[195]"], "S0663": ["https://attack.mitre.org/software/S0663", "SysUpdate", "SysUpdate can deobfuscate packed binaries in memory.[101]"], "S0011": ["https://attack.mitre.org/software/S0011", "Taidoor", "Taidoor can use a stream cipher to decrypt stings used by the malware.[196]"], "S0560": ["https://attack.mitre.org/software/S0560", "TEARDROP", "TEARDROP was decoded using a custom rolling XOR algorithm to execute a customized Cobalt Strike payload.[197][198][161]"], "G0027": ["https://attack.mitre.org/groups/G0027", "Threat Group-3390", "During execution, Threat Group-3390 malware deobfuscates and decompresses code that was encoded with Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.[199]"], "S0665": ["https://attack.mitre.org/software/S0665", "ThreatNeedle", "ThreatNeedle can decrypt its payload using RC4, AES, or one-byte XORing.[200]"], "S0678": ["https://attack.mitre.org/software/S0678", "Torisma", "Torisma has used XOR and Base64 to decode C2 data.[201]"], "S0266": ["https://attack.mitre.org/software/S0266", "TrickBot", "TrickBot decodes the configuration data and modules.[202][203][204]"], "G0081": ["https://attack.mitre.org/groups/G0081", "Tropic Trooper", "Tropic Trooper used shellcode with an XOR algorithm to decrypt a payload. Tropic Trooper also decrypted image files which contained a payload.[205][206]"], "S0436": ["https://attack.mitre.org/software/S0436", "TSCookie", "TSCookie has the ability to decrypt, load, and execute a DLL and its resources.[207]"], "S0647": ["https://attack.mitre.org/software/S0647", "Turian", "Turian has the ability to use a XOR decryption key to extract C2 server domains and IP addresses.[208]"], "G0010": ["https://attack.mitre.org/groups/G0010", "Turla", "Turla has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads.[209]"], "S0263": ["https://attack.mitre.org/software/S0263", "TYPEFRAME", "One TYPEFRAME variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value \"0x35\".[210]"], "S0386": ["https://attack.mitre.org/software/S0386", "Ursnif", "Ursnif has used crypto key information stored in the Registry to decrypt Tor clients dropped to disk.[211]"], "S0476": ["https://attack.mitre.org/software/S0476", "Valak", "Valak has the ability to decode and decrypt downloaded files.[212][213]"], "S0636": ["https://attack.mitre.org/software/S0636", "VaporRage", "VaporRage can deobfuscate XOR-encoded shellcode prior to execution.[34]"], "S0257": ["https://attack.mitre.org/software/S0257", "VERMIN", "VERMIN decrypts code, strings, and commands to use once it's on the victim's machine.[214]"], "S0180": ["https://attack.mitre.org/software/S0180", "Volgmer", "Volgmer deobfuscates its strings and APIs once its executed.[215]"], "S0670": ["https://attack.mitre.org/software/S0670", "WarzoneRAT", "WarzoneRAT can use XOR 0x45 to decrypt obfuscated code.[216]"], "S0612": ["https://attack.mitre.org/software/S0612", "WastedLocker", "WastedLocker's custom cryptor, CryptOne, used an XOR based algorithm to decrypt the payload.[217]"], "S0579": ["https://attack.mitre.org/software/S0579", "Waterbear", "Waterbear has the ability to decrypt its RC4 encrypted payload for execution.[218]"], "S0515": ["https://attack.mitre.org/software/S0515", "WellMail", "WellMail can decompress scripts received from C2.[219]"], "S0514": ["https://attack.mitre.org/software/S0514", "WellMess", "WellMess can decode and decrypt data received from C2.[220][221][222]"], "S0689": ["https://attack.mitre.org/software/S0689", "WhisperGate", "WhisperGate can deobfuscate downloaded files stored in reverse byte order and decrypt embedded resources using multiple XOR operations.[223][224]"], "S0466": ["https://attack.mitre.org/software/S0466", "WindTail", "WindTail has the ability to decrypt strings using hard-coded AES keys.[225]"], "S0430": ["https://attack.mitre.org/software/S0430", "Winnti for Linux", "Winnti for Linux has decoded XOR encoded strings holding its configuration upon execution.[226]"], "S0141": ["https://attack.mitre.org/software/S0141", "Winnti for Windows", "The Winnti for Windows dropper can decrypt and decompresses a data blob.[227]"], "G0090": ["https://attack.mitre.org/groups/G0090", "WIRTE", "WIRTE has used Base64 to decode malicious VBS script.[228]"], "S0653": ["https://attack.mitre.org/software/S0653", "xCaon", "xCaon has decoded strings from the C2 server before executing commands.[229]"], "S0388": ["https://attack.mitre.org/software/S0388", "YAHOYAH", "YAHOYAH decrypts downloaded files before execution.[230]"], "S0251": ["https://attack.mitre.org/software/S0251", "Zebrocy", "Zebrocy decodes its secondary payload and writes it to the victim’s machine. Zebrocy also uses AES and XOR to decrypt strings and payloads.[231][232]"], "S0230": ["https://attack.mitre.org/software/S0230", "ZeroT", "ZeroT shellcode decrypts and decompresses its RC4-encrypted payload.[233]"], "S0330": ["https://attack.mitre.org/software/S0330", "Zeus Panda", "Zeus Panda decrypts strings in the code during the execution process.[234]"], "G0128": ["https://attack.mitre.org/groups/G0128", "ZIRCONIUM", "ZIRCONIUM has used the AES256 algorithm with a SHA1 derived key to decrypt exploit code.[235]"]}, "Mitigation": {}, "Detection": {"File Modification": ["Monitor for changes made to files for unexpected modifications that attempt to hide artifacts.", "DS0022", "https://attack.mitre.org/datasources/DS0022", "File"], "Process Creation": ["Monitor for newly executed processes that attempt to hide artifacts of an intrusion, such as common archive file applications and extensions (ex: Zip and RAR archive tools), and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Script Execution": ["Monitor for any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.", "DS0012", "https://attack.mitre.org/datasources/DS0012", "Script"]}}
