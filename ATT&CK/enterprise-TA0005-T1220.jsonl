{"TTP_id": "enterprise-TA0005-T1220", "TTP_name": "XSL Script Processing", "Description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. [1]Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe) [2] can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. [3] Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. [4] Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.[5]Command-line examples:[3][5]Another variation of this technique, dubbed \"Squiblytwo\", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file.[6] This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch.[5]Command-line examples:[5][6]", "Property": {"ID": "T1220", "Sub-techniques": "No sub-techniques", "Tactic": "Defense Evasion", "Platforms": "Windows", "System Requirements": "Microsoft Core XML Services (MSXML) or access to wmic.exe", "Defense Bypassed": "Anti-virus, Application Control, Digital Certificate Validation", "Contributors": "Avneet Singh; Casey Smith; Praetorian", "Version": "1.2", "Created": "17 October 2018", "Last Modified": "05 May 2022"}, "Examples": {"S0373": ["https://attack.mitre.org/software/S0373", "Astaroth", "Astaroth executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain. [7]"], "G0080": ["https://attack.mitre.org/groups/G0080", "Cobalt Group", "Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.[8]"], "G0126": ["https://attack.mitre.org/groups/G0126", "Higaisa", "Higaisa used an XSL file to run VBScript code.[9]"], "G0032": ["https://attack.mitre.org/groups/G0032", "Lazarus Group", "Lazarus Group has used WMIC to execute a remote XSL script to establish persistence.[10]"]}, "Mitigation": {"M1038": ["https://attack.mitre.org/mitigations/M1038", "Execution Prevention", "If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries."]}, "Detection": {"Module Load": ["Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process.", "DS0011", "https://attack.mitre.org/datasources/DS0011", "Module"], "Process Creation": ["Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. [6] [11] Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded. The presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"]}}
