{"TTP_id": "enterprise-TA0002-T1059-T1059.002", "TTP_name": "AppleScript", "Description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.[1] These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.Scripts can be run from the command-line via osascript /path/to/script or osascript -e \"script here\". Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding #!/usr/bin/osascript to the start of the script file.[2]AppleScripts do not need to call osascript to execute, however. They may be executed from within mach-O binaries by using the macOS Native APIs NSAppleScript or OSAScript, both of which execute code independent of the /usr/bin/osascript command line utility.Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format.[3] Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.[4]", "Property": {"ID": "T1059.002", "Sub-technique of": "T1059", "Tactic": "Execution", "Platforms": "macOS", "Contributors": "Phil Stokes, SentinelOne", "Version": "1.1", "Created": "09 March 2020", "Last Modified": "19 April 2022"}, "Examples": {"S0482": ["https://attack.mitre.org/software/S0482", "Bundlore", "Bundlore can use AppleScript to inject malicious JavaScript into a browser.[5]"], "S0281": ["https://attack.mitre.org/software/S0281", "Dok", "Dok uses AppleScript to create a login item for persistence.[6]"], "S0595": ["https://attack.mitre.org/software/S0595", "ThiefQuest", "ThiefQuest uses AppleScript's osascript -e command to launch ThiefQuest's persistence via Launch Agent and Launch Daemon. [7]"]}, "Mitigation": {"M1045": ["https://attack.mitre.org/mitigations/M1045", "Code Signing", "Require that all AppleScript be signed by a trusted developer ID before being executed - this will prevent random AppleScript code from executing.[8] This subjects AppleScript code to the same scrutiny as other .app files passing through Gatekeeper."], "M1038": ["https://attack.mitre.org/mitigations/M1038", "Execution Prevention", "Use application control where appropriate."]}, "Detection": {"Command Execution": ["Monitor executed commands and arguments that may abuse AppleScript for execution. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "OS API Execution": ["Monitor for execution of AppleScript through osascript and usage of the NSAppleScript and OSAScript APIs that may be related to other suspicious behavior occurring on the system.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Creation": ["Monitor for newly executed processes that may abuse AppleScript for execution. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "", "", ""]}}
