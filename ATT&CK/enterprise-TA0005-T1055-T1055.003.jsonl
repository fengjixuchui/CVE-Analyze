{"TTP_id": "enterprise-TA0005-T1055-T1055.003", "TTP_name": "Thread Execution Hijacking", "Description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.[1]This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.", "Property": {"ID": "T1055.003", "Sub-technique of": "T1055", "Tactics": "Defense Evasion, Privilege Escalation", "Platforms": "Windows", "Permissions Required": "User", "Defense Bypassed": "Anti-virus, Application control", "Version": "1.1", "Created": "14 January 2020", "Last Modified": "18 October 2021"}, "Examples": {"S0168": ["https://attack.mitre.org/software/S0168", "Gazer", "Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process.[2][3]"], "S0094": ["https://attack.mitre.org/software/S0094", "Trojan.Karagany", "Trojan.Karagany can inject a suspended thread of its own process into a new process and initiate via the ResumeThread API.[4]"], "S0579": ["https://attack.mitre.org/software/S0579", "Waterbear", "Waterbear can use thread injection to inject shellcode into the process of security software.[5]"]}, "Mitigation": {"M1040": ["https://attack.mitre.org/mitigations/M1040", "Behavior Prevention on Endpoint", "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process."]}, "Detection": {"OS API Execution": ["Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.[1]", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Access": ["Monitor for processes being viewed that may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges.", "", "", ""], "Process Modification": ["Monitor for changes made to processes that may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges.", "", "", ""]}}
