{"TTP_id": "enterprise-TA0005-T1550-T1550.001", "TTP_name": "Application Access Token", "Description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).[1]In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.[2][3] The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured – for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.[4]OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.[5]For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.[6] With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.[7]Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.", "Property": {"ID": "T1550.001", "Sub-technique of": "T1550", "Tactics": "Defense Evasion, Lateral Movement", "Platforms": "Containers, Google Workspace, Office 365, SaaS", "Defense Bypassed": "System Access Controls", "CAPEC ID": "CAPEC-593", "Contributors": "Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services); Jen Burns, HubSpot; Mark Wee; Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC); Shailesh Tiwary (Indian Army)", "Version": "1.3", "Created": "30 January 2020", "Last Modified": "20 May 2022"}, "Examples": {"G0007": ["https://attack.mitre.org/groups/G0007", "APT28", "APT28 has used several malicious applications that abused OAuth access tokens to gain access to target email accounts, including Gmail and Yahoo Mail.[8]"], "G0016": ["https://attack.mitre.org/groups/G0016", "APT29", "APT29 has used compromised service principals to make changes to the Office 365 environment.[9]"], "S0683": ["https://attack.mitre.org/software/S0683", "Peirates", "Peirates can use stolen service account tokens to perform its operations. It also enables adversaries to switch between valid service accounts.[10]"]}, "Mitigation": {"M1047": ["https://attack.mitre.org/mitigations/M1047", "Audit", "Administrators should audit all cloud and container accounts to ensure that they are necessary and that the permissions granted to them are appropriate. Where possible, the ability to request temporary account tokens on behalf of another accounts should be disabled. Additionally, administrators can leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access."], "M1041": ["https://attack.mitre.org/mitigations/M1041", "Encrypt Sensitive Information", "File encryption should be enforced across email communications containing sensitive information that may be obtained through access to email services."], "M1021": ["https://attack.mitre.org/mitigations/M1021", "Restrict Web-Based Content", "Update corporate policies to restrict what types of third-party applications may be added to any online service or tool that is linked to the company's information, accounts or network (e.g., Google, Microsoft, Dropbox, Basecamp, GitHub). However, rather than providing high-level guidance on this, be extremely specific—include a list of per-approved applications and deny all others not on the list. Administrators may also block end-user consent through administrative portals, such as the Azure Portal, disabling users from authorizing third-party apps through OAuth and forcing administrative consent.[11]"]}, "Detection": {"Web Credential Usage": ["Monitor the use of application access tokens to interact with resources or services that do not fit the organization baseline. For example, an application, that is not meant to read emails, is now accessing users’ mail boxes and, potentially, exfiltrating sensitive data.", "DS0006", "https://attack.mitre.org/datasources/DS0006", "Web Credential"]}}
