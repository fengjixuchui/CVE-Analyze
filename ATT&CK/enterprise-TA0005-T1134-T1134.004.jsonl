{"TTP_id": "enterprise-TA0005-T1134-T1134.004", "TTP_name": "Parent PID Spoofing", "Description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use.[1] This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.[2]Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be explorer.exe rather than an Office document delivered as part of Spearphishing Attachment.[3] This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API.[4][3]Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as lsass.exe), causing the new process to be elevated via the inherited access token.[5]", "Property": {"ID": "T1134.004", "Sub-technique of": "T1134", "Tactics": "Defense Evasion, Privilege Escalation", "Platforms": "Windows", "Permissions Required": "Administrator, User", "Defense Bypassed": "Heuristic Detection, Host Forensic Analysis", "Contributors": "Wayne Silva, F-Secure Countercept", "Version": "1.0", "Created": "18 February 2020", "Last Modified": "03 May 2022"}, "Examples": {"S0154": ["https://attack.mitre.org/software/S0154", "Cobalt Strike", "Cobalt Strike can spawn processes with alternate PPIDs.[6][7]"], "S0356": ["https://attack.mitre.org/software/S0356", "KONNI", "KONNI has used parent PID spoofing to spawn a new cmd process using CreateProcessW and a handle to Taskmgr.exe.[8]"], "S0501": ["https://attack.mitre.org/software/S0501", "PipeMon", "PipeMon can use parent PID spoofing to elevate privileges.[9]"]}, "Mitigation": {}, "Detection": {"OS API Execution": ["", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Creation": ["Monitor for newly constructed processes and/or command-lines that may abuse mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be explorer.exe", "", "", ""], "Process Metadata": ["Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.[3]", "", "", ""]}}
