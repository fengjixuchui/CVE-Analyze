{"TTP_id": "enterprise-TA0005-T1564-T1564.007", "TTP_name": "VBA Stomping", "Description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.[1]MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.[2][3]An adversary may hide malicious VBA code by overwriting the VBA source code location with zeroâ€™s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.[4][1][5]", "Property": {"ID": "T1564.007", "Sub-technique of": "T1564", "Tactic": "Defense Evasion", "Platforms": "Linux, Windows, macOS", "System Requirements": "MS Office version specified in _VBA_PROJECT stream must match host", "Permissions Required": "User", "Contributors": "Rick Cole, Mandiant", "Version": "1.1", "Created": "17 September 2020", "Last Modified": "15 October 2021"}, "Examples": {}, "Mitigation": {"M1042": ["https://attack.mitre.org/mitigations/M1042", "Disable or Remove Feature or Program", "Turn off or restrict access to unneeded VB components.[6]"]}, "Detection": {"File Metadata": ["If the document is opened with a Graphical User Interface (GUI) the malicious p-code is decompiled and may be viewed. However, if the PROJECT stream, which specifies the project properties, is modified in a specific way the decompiled VBA code will not be displayed. For example, adding a module name that is undefined to the PROJECT stream will inhibit attempts of reading the VBA source code through the GUI.[1]", "DS0022", "https://attack.mitre.org/datasources/DS0022", "File"], "Script Execution": ["Detection efforts should be placed finding differences between VBA source code and p-code.[4] VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code.[5][7]", "DS0012", "https://attack.mitre.org/datasources/DS0012", "Script"]}}
