{"TTP_id": "enterprise-TA0004-T1055-T1055.015", "TTP_name": "ListPlanting", "Description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.List-view controls are user interface windows used to display collections of items.[1] Information about an application's list-view settings are stored within the process' memory in a SysListView32 control.ListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.[2] Adversaries must first copy code into the target processâ€™ memory space, which can be performed various ways including by directly obtaining a handle to the SysListView32 child of the victim process window (via Windows API calls such as FindWindow and/or EnumWindows) or other Process Injection methods.Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored WriteProcessMemory function. For example, an adversary can use the PostMessage and/or SendMessage API functions to send LVM_SETITEMPOSITION and LVM_GETITEMPOSITION messages, effectively copying a payload 2 bytes at a time to the allocated memory.[3]Finally, the payload is triggered by sending the LVM_SORTITEMS message to the SysListView32 child of the process window, with the payload within the newly allocated buffer passed and executed as the ListView_SortItems callback.", "Property": {"ID": "T1055.015", "Sub-technique of": "T1055", "Tactics": "Defense Evasion, Privilege Escalation", "Platforms": "Windows", "Permissions Required": "User", "Contributors": "ESET", "Version": "1.0", "Created": "22 November 2021", "Last Modified": "08 March 2022"}, "Examples": {"S0260": ["https://attack.mitre.org/software/S0260", "InvisiMole", "InvisiMole has used ListPlanting to inject code into a trusted process.[3]"]}, "Mitigation": {"M1040": ["https://attack.mitre.org/mitigations/M1040", "Behavior Prevention on Endpoint", "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process."]}, "Detection": {"OS API Execution": ["Consider monitoring for excessive use of SendMessage and/or PostMessage API functions with LVM_SETITEMPOSITION and/or LVM_GETITEMPOSITION arguments.Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as FindWindow, FindWindowEx, EnumWindows, EnumChildWindows, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be abused for this technique.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Modification": ["Monitor for changes made to processes that may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Analyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.", "", "", ""]}}
