{"TTP_id": "enterprise-TA0002-T1106", "TTP_name": "Native API", "Description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.[1][2] These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Native API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.[3][4][5] For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.[6][7] This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.[8][9][10]Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.[11][12][13][14]Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).", "Property": {"ID": "T1106", "Sub-techniques": "No sub-techniques", "Tactic": "Execution", "Platforms": "Linux, Windows, macOS", "Contributors": "Gordon Long, Box, Inc., @ethicalhax; Stefan Kanthak", "Version": "2.1", "Created": "31 May 2017", "Last Modified": "19 April 2022"}, "Examples": {"S0045": ["https://attack.mitre.org/software/S0045", "ADVSTORESHELL", "ADVSTORESHELL is capable of starting a process using CreateProcess.[15]"], "S0622": ["https://attack.mitre.org/software/S0622", "AppleSeed", "AppleSeed has the ability to use multiple dynamically resolved API calls.[16]"], "G0067": ["https://attack.mitre.org/groups/G0067", "APT37", "APT37 leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection.[17]"], "G0082": ["https://attack.mitre.org/groups/G0082", "APT38", "APT38 has used the Windows API to execute code within a victim's system.[18]"], "S0456": ["https://attack.mitre.org/software/S0456", "Aria-body", "Aria-body has the ability to launch files using ShellExecute.[19]"], "S0438": ["https://attack.mitre.org/software/S0438", "Attor", "Attor's dispatcher has used CreateProcessW API for execution.[20]"], "S0640": ["https://attack.mitre.org/software/S0640", "Avaddon", "Avaddon has used the Windows Crypto API to generate an AES key.[21]"], "S0638": ["https://attack.mitre.org/software/S0638", "Babuk", "Babuk can use multiple Windows API calls for actions on compromised hosts including discovery and execution.[22][23][24]"], "S0475": ["https://attack.mitre.org/software/S0475", "BackConfig", "BackConfig can leverage API functions such as ShellExecuteA and HttpOpenRequestA in the process of downloading and executing files.[25]"], "S0606": ["https://attack.mitre.org/software/S0606", "Bad Rabbit", "Bad Rabbit has used various Windows API calls.[26]"], "S0128": ["https://attack.mitre.org/software/S0128", "BADNEWS", "BADNEWS has a command to download an .exe and execute it via CreateProcess API. It can also run with ShellExecute.[27][28]"], "S0234": ["https://attack.mitre.org/software/S0234", "Bandook", "Bandook has used the ShellExecuteW() function call.[29]"], "S0239": ["https://attack.mitre.org/software/S0239", "Bankshot", "Bankshot creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA().[30]"], "S0534": ["https://attack.mitre.org/software/S0534", "Bazar", "Bazar can use various APIs to allocate memory and facilitate code execution/injection.[31]"], "S0470": ["https://attack.mitre.org/software/S0470", "BBK", "BBK has the ability to use the CreatePipe API to add a sub-process for execution via cmd.[32]"], "S0574": ["https://attack.mitre.org/software/S0574", "BendyBear", "BendyBear can load and execute modules and Windows Application Programming (API) calls using standard shellcode API hashing.[33]"], "S0268": ["https://attack.mitre.org/software/S0268", "Bisonal", "Bisonal has used the Windows API to communicate with the Service Control Manager to execute a thread.[34]"], "S0570": ["https://attack.mitre.org/software/S0570", "BitPaymer", "BitPaymer has used dynamic API resolution to avoid identifiable strings within the binary, including RegEnumKeyW.[35]"], "G0098": ["https://attack.mitre.org/groups/G0098", "BlackTech", "BlackTech has used built-in API functions.[36]"], "S0521": ["https://attack.mitre.org/software/S0521", "BloodHound", "BloodHound can use .NET API calls in the SharpHound ingestor component to pull Active Directory data.[37]"], "S0651": ["https://attack.mitre.org/software/S0651", "BoxCaon", "BoxCaon has used Windows API calls to obtain information about the compromised host.[38]"], "S0471": ["https://attack.mitre.org/software/S0471", "build_downer", "build_downer has the ability to use the WinExec API to execute malware on a compromised host.[32]"], "S0693": ["https://attack.mitre.org/software/S0693", "CaddyWiper", "CaddyWiper has the ability to dynamically resolve and use APIs, including SeTakeOwnershipPrivilege.[39]"], "S0484": ["https://attack.mitre.org/software/S0484", "Carberp", "Carberp has used the NtQueryDirectoryFile and ZwQueryDirectoryFile functions to hide files and directories.[40]"], "S0631": ["https://attack.mitre.org/software/S0631", "Chaes", "Chaes used the CreateFileW() API function with read permissions to access downloaded payloads.[41]"], "G0114": ["https://attack.mitre.org/groups/G0114", "Chimera", "Chimera has used direct Windows system calls by leveraging Dumpert.[42]"], "S0667": ["https://attack.mitre.org/software/S0667", "Chrommme", "Chrommme can use Windows API including WinExec for execution.[43]"], "S0611": ["https://attack.mitre.org/software/S0611", "Clop", "Clop has used built-in API functions such as WNetOpenEnumW(), WNetEnumResourceW(), WNetCloseEnum(), GetProcAddress(), and VirtualAlloc().[44][45]"], "S0154": ["https://attack.mitre.org/software/S0154", "Cobalt Strike", "Cobalt Strike's Beacon payload is capable of running shell commands without cmd.exe and PowerShell commands without powershell.exe[46][47][48]"], "S0126": ["https://attack.mitre.org/software/S0126", "ComRAT", "ComRAT can load a PE file from memory or the file system and execute it with CreateProcessW.[49]"], "S0575": ["https://attack.mitre.org/software/S0575", "Conti", "Conti has used API calls during execution.[50][51]"], "S0625": ["https://attack.mitre.org/software/S0625", "Cuba", "Cuba has used several built-in API functions for discovery like GetIpNetTable and NetShareEnum.[52]"], "S0687": ["https://attack.mitre.org/software/S0687", "Cyclops Blink", "Cyclops Blink can use various Linux API functions including those for execution and discovery.[53]"], "S0354": ["https://attack.mitre.org/software/S0354", "Denis", "Denis used the IsDebuggerPresent, OutputDebugString, and SetLastError APIs to avoid debugging. Denis used GetProcAddress and LoadLibrary to dynamically resolve APIs. Denis also used the Wow64SetThreadContext API as part of a process hollowing process.[54]"], "S0659": ["https://attack.mitre.org/software/S0659", "Diavol", "Diavol has used several API calls like GetLogicalDriveStrings, SleepEx, SystemParametersInfoAPI, CryptEncrypt, and others to execute parts of its attack.[55]"], "S0695": ["https://attack.mitre.org/software/S0695", "Donut", "Donut code modules use various API functions to load and inject code.[56]"], "S0694": ["https://attack.mitre.org/software/S0694", "DRATzarus", "DRATzarus can use various API calls to see if it is running in a sandbox.[57]"], "S0384": ["https://attack.mitre.org/software/S0384", "Dridex", "Dridex has used the OutputDebugStringW function to avoid malware analysis as part of its anti-debugging technique.[58]"], "S0554": ["https://attack.mitre.org/software/S0554", "Egregor", "Egregor has used the Windows API to make detection more difficult.[59]"], "S0363": ["https://attack.mitre.org/software/S0363", "Empire", "Empire contains a variety of enumeration modules that have an option to use API calls to carry out tasks.[60]"], "S0396": ["https://attack.mitre.org/software/S0396", "EvilBunny", "EvilBunny has used various API calls as part of its checks to see if the malware is running in a sandbox.[61]"], "S0569": ["https://attack.mitre.org/software/S0569", "Explosive", "Explosive has a function to call the OpenClipboard wrapper.[62]"], "S0512": ["https://attack.mitre.org/software/S0512", "FatDuke", "FatDuke can call ShellExecuteW to open the default browser on the URL localhost.[63]"], "S0696": ["https://attack.mitre.org/software/S0696", "Flagpro", "Flagpro can use Native API to enable obfuscation including GetLastError and GetTickCount.[64]"], "S0661": ["https://attack.mitre.org/software/S0661", "FoggyWeb", "FoggyWeb's loader can use API functions to load the FoggyWeb backdoor into the same Application Domain within which the legitimate AD FS managed code is executed.[65]"], "G0047": ["https://attack.mitre.org/groups/G0047", "Gamaredon Group", "Gamaredon Group malware has used CreateProcess to launch additional malicious components.[66]"], "S0666": ["https://attack.mitre.org/software/S0666", "Gelsemium", "Gelsemium has the ability to use various Windows API functions to perform tasks.[43]"], "S0032": ["https://attack.mitre.org/software/S0032", "gh0st RAT", "gh0st RAT has used the InterlockedExchange, SeShutdownPrivilege, and ExitWindowsEx Windows API functions.[67]"], "S0493": ["https://attack.mitre.org/software/S0493", "GoldenSpy", "GoldenSpy can execute remote commands in the Windows command shell using the WinExec() API.[68]"], "S0477": ["https://attack.mitre.org/software/S0477", "Goopy", "Goopy has the ability to enumerate the infected system's user name via GetUserNameW.[54]"], "G0078": ["https://attack.mitre.org/groups/G0078", "Gorgon Group", "Gorgon Group malware can leverage the Windows API call, CreateProcessA(), for execution.[69]"], "S0531": ["https://attack.mitre.org/software/S0531", "Grandoreiro", "Grandoreiro can execute through the WinExec API.[70]"], "S0632": ["https://attack.mitre.org/software/S0632", "GrimAgent", "GrimAgent can use Native API including GetProcAddress and ShellExecuteW.[71]"], "S0561": ["https://attack.mitre.org/software/S0561", "GuLoader", "GuLoader can use a number of different APIs for discovery and execution.[72]"], "S0499": ["https://attack.mitre.org/software/S0499", "Hancitor", "Hancitor has used CallWindowProc and EnumResourceTypesA to interpret and execute shellcode.[73]"], "S0391": ["https://attack.mitre.org/software/S0391", "HAWKBALL", "HAWKBALL has leveraged several Windows API calls to create processes, gather disk information, and detect debugger activity.[74]"], "S0697": ["https://attack.mitre.org/software/S0697", "HermeticWiper", "HermeticWiper can call multiple Windows API functions used for privilege escalation, service execution, and to overwrite random bites of data.[75][76][77][78]"], "S0698": ["https://attack.mitre.org/software/S0698", "HermeticWizard", "HermeticWizard can connect to remote shares using WNetAddConnection2W.[77]"], "G0126": ["https://attack.mitre.org/groups/G0126", "Higaisa", "Higaisa has called various native OS APIs.[79]"], "S0431": ["https://attack.mitre.org/software/S0431", "HotCroissant", "HotCroissant can perform dynamic DLL importing and API lookups using LoadLibrary and GetProcAddress on obfuscated strings.[80]"], "S0398": ["https://attack.mitre.org/software/S0398", "HyperBro", "HyperBro has the ability to run an application (CreateProcessW) or script/file (ShellExecuteW) via API.[81]"], "S0537": ["https://attack.mitre.org/software/S0537", "HyperStack", "HyperStack can use Windows API's ConnectNamedPipe and WNetAddConnection2 to detect incoming connections and connect to remote shares.[82]"], "S0483": ["https://attack.mitre.org/software/S0483", "IcedID", "IcedID has called ZwWriteVirtualMemory, ZwProtectVirtualMemory, ZwQueueApcThread, and NtResumeThread to inject itself into a remote process.[83]"], "S0434": ["https://attack.mitre.org/software/S0434", "Imminent Monitor", "Imminent Monitor has leveraged CreateProcessW() call to execute the debugger.[84]"], "S0259": ["https://attack.mitre.org/software/S0259", "InnaputRAT", "InnaputRAT uses the API call ShellExecuteW for execution.[85]"], "S0260": ["https://attack.mitre.org/software/S0260", "InvisiMole", "InvisiMole can use winapiexec tool for indirect execution of ShellExecuteW and CreateProcessA.[86]"], "S0607": ["https://attack.mitre.org/software/S0607", "KillDisk", "KillDisk has called the Windows API to retrieve the hard disk handle and shut down the machine.[87]"], "S0669": ["https://attack.mitre.org/software/S0669", "KOCTOPUS", "KOCTOPUS can use the LoadResource and CreateProcessW APIs for execution.[88]"], "S0356": ["https://attack.mitre.org/software/S0356", "KONNI", "KONNI has hardcoded API calls within its functions to use on the victim's machine.[89]"], "G0032": ["https://attack.mitre.org/groups/G0032", "Lazarus Group", "Lazarus Group has used the Windows API ObtainUserAgentString to obtain the User-Agent from a compromised host to connect to a C2 server.[90] Lazarus Group has also used various, often lesser known, functions to perform various types of Discovery and Process Injection.[91][92]"], "S0395": ["https://attack.mitre.org/software/S0395", "LightNeuron", "LightNeuron is capable of starting a process using CreateProcess.[93]"], "S0680": ["https://attack.mitre.org/software/S0680", "LitePower", "LitePower can use various API calls.[94]"], "S0681": ["https://attack.mitre.org/software/S0681", "Lizar", "Lizar has used various Windows API functions on a victim's machine.[95]"], "S0447": ["https://attack.mitre.org/software/S0447", "Lokibot", "Lokibot has used LoadLibrary(), GetProcAddress() and CreateRemoteThread() API functions to execute its shellcode.[96]"], "S0652": ["https://attack.mitre.org/software/S0652", "MarkiRAT", "MarkiRAT can run the ShellExecuteW API via the Windows Command Shell.[97]"], "S0449": ["https://attack.mitre.org/software/S0449", "Maze", "Maze has used several Windows API functions throughout the encryption process including IsDebuggerPresent, TerminateProcess, Process32FirstW, among others.[98]"], "S0576": ["https://attack.mitre.org/software/S0576", "MegaCortex", "After escalating privileges, MegaCortex calls TerminateProcess(), CreateRemoteThread, and other Win32 APIs.[99]"], "G0045": ["https://attack.mitre.org/groups/G0045", "menuPass", "menuPass has used native APIs including GetModuleFileName, lstrcat, CreateFile, and ReadFile.[100]"], "S0455": ["https://attack.mitre.org/software/S0455", "Metamorfo", "Metamorfo has used native WINAPI calls.[101][102]"], "S0688": ["https://attack.mitre.org/software/S0688", "Meteor", "Meteor can use WinAPI to remove a victim machine from an Active Directory domain.[103]"], "S0256": ["https://attack.mitre.org/software/S0256", "Mosquito", "Mosquito leverages the CreateProcess() and LoadLibrary() calls to execute files with the .dll and .exe extensions.[104]"], "S0630": ["https://attack.mitre.org/software/S0630", "Nebulae", "Nebulae has the ability to use CreateProcess to execute a process.[105]"], "S0457": ["https://attack.mitre.org/software/S0457", "Netwalker", "Netwalker can use Windows API functions to inject the ransomware DLL.[106]"], "S0198": ["https://attack.mitre.org/software/S0198", "NETWIRE", "NETWIRE can use Native API including CreateProcess GetProcessById, and WriteProcessMemory.[107]"], "S0385": ["https://attack.mitre.org/software/S0385", "njRAT", "njRAT has used the ShellExecute() function within a script.[108]"], "G0116": ["https://attack.mitre.org/groups/G0116", "Operation Wocao", "Operation Wocao has used the CreateProcessA and ShellExecute API function to launch commands after being injected into a selected process.[109]"], "S0517": ["https://attack.mitre.org/software/S0517", "Pillowmint", "Pillowmint has used multiple native Windows APIs to execute and conduct process injections.[110]"], "S0501": ["https://attack.mitre.org/software/S0501", "PipeMon", "PipeMon's first stage has been executed by a call to CreateProcess with the decryption password in an argument. PipeMon has used a call to LoadLibrary to load its installer.[111]"], "S0435": ["https://attack.mitre.org/software/S0435", "PLEAD", "PLEAD can use ShellExecute to execute applications.[112]"], "S0013": ["https://attack.mitre.org/software/S0013", "PlugX", "PlugX can use the Windows API functions GetProcAddress, LoadLibrary, and CreateProcess to execute another process.[113][114]"], "S0518": ["https://attack.mitre.org/software/S0518", "PolyglotDuke", "PolyglotDuke can use LoadLibraryW and CreateProcess to load and execute code.[63]"], "S0453": ["https://attack.mitre.org/software/S0453", "Pony", "Pony has used several Windows functions for various purposes.[115]"], "S0147": ["https://attack.mitre.org/software/S0147", "Pteranodon", "Pteranodon has used various API calls.[116]"], "S0650": ["https://attack.mitre.org/software/S0650", "QakBot", "QakBot can use GetProcAddress to help delete malicious strings from memory.[117]"], "S0629": ["https://attack.mitre.org/software/S0629", "RainyDay", "The file collection tool used by RainyDay can utilize native API including ReadDirectoryChangeW for folder monitoring.[105]"], "S0458": ["https://attack.mitre.org/software/S0458", "Ramsay", "Ramsay can use Windows API functions such as WriteFile, CloseHandle, and GetCurrentHwProfile during its collection and file storage operations. Ramsay can execute its embedded components via CreateProcessA and ShellExecute.[118]"], "S0662": ["https://attack.mitre.org/software/S0662", "RCSession", "RCSession can use WinSock API for communication including WSASend and WSARecv.[119]"], "S0416": ["https://attack.mitre.org/software/S0416", "RDFSNIFFER", "RDFSNIFFER has used several Win32 API functions to interact with the victim machine.[120]"], "S0496": ["https://attack.mitre.org/software/S0496", "REvil", "REvil can use Native API for execution and to retrieve active services.[121][122]"], "S0448": ["https://attack.mitre.org/software/S0448", "Rising Sun", "Rising Sun used dynamic API resolutions to various Windows APIs by leveraging LoadLibrary() and GetProcAddress().[123]"], "S0240": ["https://attack.mitre.org/software/S0240", "ROKRAT", "ROKRAT can use a variety of API calls to execute shellcode.[124]"], "S0148": ["https://attack.mitre.org/software/S0148", "RTM", "RTM can use the FindNextUrlCacheEntryA and FindFirstUrlCacheEntryA functions to search for specific strings within browser history.[125]"], "S0446": ["https://attack.mitre.org/software/S0446", "Ryuk", "Ryuk has used multiple native APIs including ShellExecuteW to run executables,GetWindowsDirectoryW to create folders, and VirtualAlloc, WriteProcessMemory, and CreateRemoteThread for process injection.[126]"], "G0104": ["https://attack.mitre.org/groups/G0104", "Sharpshooter", "Sharpshooter's first-stage downloader resolved various Windows libraries and APIs, including LoadLibraryA(), GetProcAddress(), and CreateProcessA().[123]"], "S0444": ["https://attack.mitre.org/software/S0444", "ShimRat", "ShimRat has used Windows API functions to install the service and shim.[127]"], "S0445": ["https://attack.mitre.org/software/S0445", "ShimRatReporter", "ShimRatReporter used several Windows API functions to gather information from the infected system.[127]"], "S0610": ["https://attack.mitre.org/software/S0610", "SideTwist", "SideTwist can use GetUserNameW, GetComputerNameW, and GetComputerNameExW to gather information.[128]"], "G0091": ["https://attack.mitre.org/groups/G0091", "Silence", "Silence has leveraged the Windows API, including using CreateProcess() or ShellExecute(), to perform a variety of tasks.[129][130]"], "S0692": ["https://attack.mitre.org/software/S0692", "SILENTTRINITY", "SILENTTRINITY has the ability to leverage API including GetProcAddress and LoadLibrary.[131]"], "S0623": ["https://attack.mitre.org/software/S0623", "Siloscape", "Siloscape makes various native API calls.[132]"], "S0627": ["https://attack.mitre.org/software/S0627", "SodaMaster", "SodaMaster can use RegOpenKeyW to access the Registry.[133]"], "S0615": ["https://attack.mitre.org/software/S0615", "SombRAT", "SombRAT has the ability to respawn itself using ShellExecuteW and CreateProcessW.[134]"], "S0603": ["https://attack.mitre.org/software/S0603", "Stuxnet", "Stuxnet uses the SetSecurityDescriptorDacl API to reduce object integrity levels.[135]"], "S0562": ["https://attack.mitre.org/software/S0562", "SUNSPOT", "SUNSPOT used Windows API functions such as MoveFileEx and NtQueryInformationProcess as part of the SUNBURST injection process.[136]"], "S0242": ["https://attack.mitre.org/software/S0242", "SynAck", "SynAck parses the export tables of system DLLs to locate and call various Windows API functions.[137][138]"], "S0011": ["https://attack.mitre.org/software/S0011", "Taidoor", "Taidoor has the ability to use native APIs for execution including GetProcessHeap, GetProcAddress, and LoadLibrary.[139][140]"], "S0595": ["https://attack.mitre.org/software/S0595", "ThiefQuest", "ThiefQuest uses various API to perform behaviors such as executing payloads and performing local enumeration.[141]"], "S0668": ["https://attack.mitre.org/software/S0668", "TinyTurla", "TinyTurla has used WinHTTP, CreateProcess, and other APIs for C2 communications and other functions.[142]"], "S0678": ["https://attack.mitre.org/software/S0678", "Torisma", "Torisma has used various Windows API calls.[143]"], "S0266": ["https://attack.mitre.org/software/S0266", "TrickBot", "TrickBot uses the Windows API call, CreateProcessW(), to manage execution flow.[144] TrickBot has also used Nt* API functions to perform Process Injection.[145]"], "G0081": ["https://attack.mitre.org/groups/G0081", "Tropic Trooper", "Tropic Trooper has used multiple Windows APIs including HttpInitialize, HttpCreateHttpHandle, and HttpAddUrl.[146]"], "G0010": ["https://attack.mitre.org/groups/G0010", "Turla", "Turla and its RPC backdoors have used APIs calls for various tasks related to subverting AMSI and accessing then executing commands through RPC and/or named pipes.[147]"], "S0386": ["https://attack.mitre.org/software/S0386", "Ursnif", "Ursnif has used CreateProcessW to create child processes.[148]"], "S0180": ["https://attack.mitre.org/software/S0180", "Volgmer", "Volgmer executes payloads using the Windows API call CreateProcessW().[149]"], "S0670": ["https://attack.mitre.org/software/S0670", "WarzoneRAT", "WarzoneRAT can use a variety of API calls on a compromised host.[150]"], "S0612": ["https://attack.mitre.org/software/S0612", "WastedLocker", "WastedLocker's custom crypter, CryptOne, leveraged the VirtualAlloc() API function to help execute the payload.[151]"], "S0579": ["https://attack.mitre.org/software/S0579", "Waterbear", "Waterbear can leverage API functions for execution.[152]"], "S0689": ["https://attack.mitre.org/software/S0689", "WhisperGate", "WhisperGate has used the ExitWindowsEx API to flush file buffers to disk and stop running processes.[153]"], "S0466": ["https://attack.mitre.org/software/S0466", "WindTail", "WindTail can invoke Apple APIs contentsOfDirectoryAtPath, pathExtension, and (string) compare.[154]"], "S0141": ["https://attack.mitre.org/software/S0141", "Winnti for Windows", "Winnti for Windows can use Native API to create a new process and to start services.[155]"], "S0161": ["https://attack.mitre.org/software/S0161", "XAgentOSX", "XAgentOSX contains the execFile function to execute a specified file on the system using the NSTask:launch method.[156]"], "S0653": ["https://attack.mitre.org/software/S0653", "xCaon", "xCaon has leveraged native OS function calls to retrieve victim's network adapter's information using GetAdapterInfo() API.[38]"], "S0412": ["https://attack.mitre.org/software/S0412", "ZxShell", "ZxShell can leverage native API including RegisterServiceCtrlHandler to register a service.RegisterServiceCtrlHandler"]}, "Mitigation": {"M1040": ["https://attack.mitre.org/mitigations/M1040", "Behavior Prevention on Endpoint", "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office VBA macros from calling Win32 APIs. [157]"], "M1038": ["https://attack.mitre.org/mitigations/M1038", "Execution Prevention", "Identify and block potentially malicious software executed that may be executed through this technique by using application control [158] tools, like Windows Defender Application Control[159], AppLocker, [160] [161] or Software Restriction Policies [162] where appropriate. [163]"]}, "Detection": {"Module Load": ["Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Utilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions (ex: ntdll.dll, kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity.", "DS0011", "https://attack.mitre.org/datasources/DS0011", "Module"], "OS API Execution": ["Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and may be difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"]}}
