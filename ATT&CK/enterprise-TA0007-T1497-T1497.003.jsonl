{"TTP_id": "enterprise-TA0007-T1497-T1497.003", "TTP_name": "Time Based Evasion", "Description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.[1]Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.[2][3] Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).[4][5]Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.[6]", "Property": {"ID": "T1497.003", "Sub-technique of": "T1497", "Tactics": "Defense Evasion, Discovery", "Platforms": "Linux, Windows, macOS", "Defense Bypassed": "Anti-virus, Host forensic analysis, Signature-based detection, Static File Analysis", "Contributors": "Deloitte Threat Library Team; Jeff Felling, Red Canary; Jorge Orchilles, SCYTHE; Ruben Dodge, @shotgunner101", "Version": "1.2", "Created": "06 March 2020", "Last Modified": "15 October 2021"}, "Examples": {"S0584": ["https://attack.mitre.org/software/S0584", "AppleJeus", "AppleJeus has waited a specified time before downloading a second stage payload.[7]"], "S0642": ["https://attack.mitre.org/software/S0642", "BADFLICK", "BADFLICK has delayed communication to the actor-controlled IP address by 5 minutes.[8]"], "S0534": ["https://attack.mitre.org/software/S0534", "Bazar", "Bazar can use a timer to delay execution of core functionality.[9]"], "S0574": ["https://attack.mitre.org/software/S0574", "BendyBear", "BendyBear can check for analysis environments and signs of debugging using the Windows API kernel32!GetTickCountKernel32 call.[10]"], "S0268": ["https://attack.mitre.org/software/S0268", "Bisonal", "Bisonal has checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing.[11][12]"], "S0660": ["https://attack.mitre.org/software/S0660", "Clambling", "Clambling can wait 30 minutes before initiating contact with C2.[13]"], "S0611": ["https://attack.mitre.org/software/S0611", "Clop", "Clop has used the sleep command to avoid sandbox detection.[14]"], "S0115": ["https://attack.mitre.org/software/S0115", "Crimson", "Crimson can determine when it has been installed on a host for at least 15 days before downloading the final payload.[15]"], "S0694": ["https://attack.mitre.org/software/S0694", "DRATzarus", "DRATzarus can use the GetTickCount and GetSystemTimeAsFileTime API calls to measure function timing.[16] DRATzarus can also remotely shut down into sleep mode under specific conditions to evade detection.[16]"], "S0554": ["https://attack.mitre.org/software/S0554", "Egregor", "Egregor can perform a long sleep (greater than or equal to 3 minutes) to evade detection.[17]"], "S0396": ["https://attack.mitre.org/software/S0396", "EvilBunny", "EvilBunny has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox.[18]"], "S0512": ["https://attack.mitre.org/software/S0512", "FatDuke", "FatDuke can turn itself on or off at random intervals.[19]"], "S0493": ["https://attack.mitre.org/software/S0493", "GoldenSpy", "GoldenSpy's installer has delayed installation of GoldenSpy for two hours after it reaches a victim system.[20]"], "S0588": ["https://attack.mitre.org/software/S0588", "GoldMax", "GoldMax has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value.[21]"], "S0632": ["https://attack.mitre.org/software/S0632", "GrimAgent", "GrimAgent can sleep for 195 - 205 seconds after payload execution and before deleting its task.[22]"], "S0561": ["https://attack.mitre.org/software/S0561", "GuLoader", "GuLoader has the ability to perform anti-debugging based on time checks, API calls, and CPUID.[23]"], "S0697": ["https://attack.mitre.org/software/S0697", "HermeticWiper", "HermeticWiper has the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host.[24]"], "S0513": ["https://attack.mitre.org/software/S0513", "LiteDuke", "LiteDuke can wait 30 seconds before executing additional code if security software is detected.[19]"], "S0447": ["https://attack.mitre.org/software/S0447", "Lokibot", "Lokibot has performed a time-based anti-debug check before downloading its third stage.[25]"], "S0439": ["https://attack.mitre.org/software/S0439", "Okrum", "Okrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated.[26]"], "S0626": ["https://attack.mitre.org/software/S0626", "P8RAT", "P8RAT has the ability to \"sleep\" for a specified time to evade detection.[27]"], "S0453": ["https://attack.mitre.org/software/S0453", "Pony", "Pony has delayed execution using a built-in function to avoid detection and analysis.[28]"], "S0650": ["https://attack.mitre.org/software/S0650", "QakBot", "The QakBot dropper can delay dropping the payload to evade detection.[29][30]"], "S0565": ["https://attack.mitre.org/software/S0565", "Raindrop", "After initial installation, Raindrop runs a computation to delay execution.[31]"], "S0627": ["https://attack.mitre.org/software/S0627", "SodaMaster", "SodaMaster has the ability to put itself to \"sleep\" for a specified time.[27]"], "S0559": ["https://attack.mitre.org/software/S0559", "SUNBURST", "SUNBURST remained dormant after initial access for a period of up to two weeks.[32]"], "S0595": ["https://attack.mitre.org/software/S0595", "ThiefQuest", "ThiefQuest invokes time call to check the system's time, executes a sleep command, invokes a second time call, and then compares the time difference between the two time calls and the amount of time the system slept to identify the sandbox.[33]"], "S0671": ["https://attack.mitre.org/software/S0671", "Tomiris", "Tomiris has the ability to sleep for at least nine minutes to evade sandbox-based analysis systems.[34]"], "S0266": ["https://attack.mitre.org/software/S0266", "TrickBot", "TrickBot has used printf and file I/O loops to delay process execution as part of API hammering.[5]"], "S0386": ["https://attack.mitre.org/software/S0386", "Ursnif", "Ursnif has used a 30 minute delay after execution to evade sandbox monitoring tools.[35]"], "S0689": ["https://attack.mitre.org/software/S0689", "WhisperGate", "WhisperGate can pause for 20 seconds to bypass antivirus solutions.[36]"], "S0658": ["https://attack.mitre.org/software/S0658", "XCSSET", "Using the machine's local time, XCSSET waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, .report. After the elapsed time, XCSSET executes additional modules.[37]"]}, "Mitigation": {}, "Detection": {"Command Execution": ["Monitor executed commands and arguments that may employ various time-based methods to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required.", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "OS API Execution": ["Monitor for API calls that may employ various time-based methods to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Creation": ["Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.", "", "", ""]}}
