{"TTP_id": "enterprise-TA0004-T1548", "TTP_name": "Abuse Elevation Control Mechanism", "Description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "Property": {"ID": "T1548", "Sub-techniques": "T1548.001, T1548.002, T1548.003, T1548.004", "Tactics": "Privilege Escalation, Defense Evasion", "Platforms": "Linux, Windows, macOS", "Permissions Required": "Administrator, User", "Version": "1.0", "Created": "30 January 2020", "Last Modified": "21 March 2022"}, "Examples": {}, "Mitigation": {"M1047": ["https://attack.mitre.org/mitigations/M1047", "Audit", "Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate.[1]"], "M1038": ["https://attack.mitre.org/mitigations/M1038", "Execution Prevention", "System settings can prevent applications from running that haven't been downloaded from legitimate repositories which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk."], "M1028": ["https://attack.mitre.org/mitigations/M1028", "Operating System Configuration", "Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system. Ensuring that the sudo tty_tickets setting is enabled will prevent this leakage across tty sessions."], "M1026": ["https://attack.mitre.org/mitigations/M1026", "Privileged Account Management", "Remove users from the local administrator group on systems.By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed."], "M1022": ["https://attack.mitre.org/mitigations/M1022", "Restrict File and Directory Permissions", "The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege."], "M1052": ["https://attack.mitre.org/mitigations/M1052", "User Account Control", "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."]}, "Detection": {"Command Execution": ["Monitor executed commands and arguments that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions.", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "File Metadata": ["Monitor the file system for files that have the setuid or setgid bits set. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).", "DS0022", "https://attack.mitre.org/datasources/DS0022", "File"], "File Modification": ["On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file. Consider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called.", "", "", ""], "OS API Execution": ["Also look for any process API calls for behavior that may be indicative of Process Injection. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Creation": ["Monitor for newly executed processes that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions.", "", "", ""], "Process Metadata": ["Monitor contextual data about a running process, which may include information such as environment variables, image name, user/owner that may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions.", "", "", ""], "Windows Registry Key Modification": ["There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes.", "DS0024", "https://attack.mitre.org/datasources/DS0024", "Windows Registry"]}}
