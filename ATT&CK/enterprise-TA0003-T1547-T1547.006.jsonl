{"TTP_id": "enterprise-TA0003-T1547-T1547.006", "TTP_name": "Kernel Modules and Extensions", "Description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.[1] When used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0).[2] Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users.[3]Kernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.[4]Since macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces.[5]Adversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.[6][7][8][9][10][11][12][13]", "Property": {"ID": "T1547.006", "Sub-technique of": "T1547", "Tactics": "Persistence, Privilege Escalation", "Platforms": "Linux, macOS", "Permissions Required": "root", "Contributors": "Anastasios Pingios; Eric Kaiser @ideologysec; Jeremy Galloway; Red Canary; Wayne Silva, F-Secure Countercept", "Version": "1.3", "Created": "24 January 2020", "Last Modified": "20 April 2022"}, "Examples": {"S0502": ["https://attack.mitre.org/software/S0502", "Drovorub", "Drovorub can use kernel modules to establish persistence.[14]"], "S0468": ["https://attack.mitre.org/software/S0468", "Skidmap", "Skidmap has the ability to install several loadable kernel modules (LKMs) on infected machines.[13]"]}, "Mitigation": {"M1049": ["https://attack.mitre.org/mitigations/M1049", "Antivirus/Antimalware", "Common tools for detecting Linux rootkits include: rkhunter [15], chrootkit [16], although rootkits may be designed to evade certain detection tools."], "M1038": ["https://attack.mitre.org/mitigations/M1038", "Execution Prevention", "Application control and software restriction tools, such as SELinux, KSPP, grsecurity MODHARDEN, and Linux kernel tuning can aid in restricting kernel module loading.[17][18][19][20][21]"], "M1026": ["https://attack.mitre.org/mitigations/M1026", "Privileged Account Management", "Limit access to the root account and prevent users from loading kernel modules and extensions through proper privilege separation and limiting Privilege Escalation opportunities."], "M1018": ["https://attack.mitre.org/mitigations/M1018", "User Account Management", "Use MDM to disable user's ability to install or approve kernel extensions, and ensure all approved kernel extensions are in alignment with policies specified in com.apple.syspolicy.kernel-extension-policy.[22][23]"]}, "Detection": {"Command Execution": ["Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: modprobe, insmod, lsmod, rmmod, or modinfo [24] Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled. [3] Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system.[13] Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package.On macOS, monitor for execution of kextload commands and user installed kernel extensions performing abnormal and/or potentially malicious activity (such as creating network connections). Monitor for new rows added in the kext_policy table. KextPolicy stores a list of user approved (non Apple) kernel extensions and a partial history of loaded kernel modules in a SQLite database, /var/db/SystemPolicyConfiguration/KextPolicy.[25][26][27]", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "File Creation": ["Monitor for newly constructed files that may modify the kernel to automatically execute programs on system boot.", "DS0022", "https://attack.mitre.org/datasources/DS0022", "File"], "File Modification": ["Monitor for changes made to files that may modify the kernel to automatically execute programs on system boot.", "", "", ""], "Kernel Module Load": ["LKMs are typically loaded into /lib/modules and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel. [28]", "DS0008", "https://attack.mitre.org/datasources/DS0008", "Kernel"], "Process Creation": ["Monitor for newly created processes that may modify the kernel to automatically execute programs on system boot.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"]}}
