from email import header
import json
import random
import base64
from idna import valid_contextj
import requests
from random import randint
# from bs4 import BeautifulSoup
from time import sleep
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import base64
from datetime import datetime
import sys
import re
import sys
import logging
from io import BytesIO
import urllib
import urllib3
import os
import jsonlines




options = Options()
options.add_argument('--headless')
driver = webdriver.Chrome(options = options)

def EX_solve(year_month):
    os.remove(year_month+".lck")

def get_tacticses():
    driver.get("https://attack.mitre.org/techniques/enterprise/")
    tacticses=driver.find_elements(by=By.XPATH,value="//div[@id = 'enterprise-body']/div[@class='sidenav']")
    # driver.find_element(by=By.ID,value="enterprise-body").find_elements(by=By.CLASS_NAME,value="sidenav")
    ttps_list={}
    tacticses_list={}
    for tactics in tacticses:
        tactics_title=tactics.find_element(by=By.CLASS_NAME,value="sidenav-head").get_attribute("id")
        tactics_name=tactics.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.TAG_NAME,value="a").text
        tactics_url=tactics.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.TAG_NAME,value="a").get_attribute("href")
        
        tactics_teches=""
        try:
            tactics.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.CLASS_NAME,value="expand-button").click()
            tactics_teches=tactics.find_element(by=By.CLASS_NAME,value="sidenav-body")
        except Exception:
            pass
        
        teches_list={}

        if tactics_teches=="":
            teches_list=""
        else:
            teches=tactics_teches.find_elements(by=By.XPATH,value="div[@class='sidenav']")
            for tech in teches:
                tech_title=tech.find_element(by=By.CLASS_NAME,value="sidenav-head").get_attribute("id")
                tech_name=tech.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.TAG_NAME,value="a").text
                tech_url=tech.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.TAG_NAME,value="a").get_attribute("href")

                tech_procedures=""
                try:
                    tech.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.CLASS_NAME,value="expand-button").click()
                    tech_procedures=tech.find_element(by=By.CLASS_NAME,value="sidenav-body")
                except Exception:
                    pass

                procedure_list={}
                if tech_procedures=="":
                    procedure_list=""
                else:
                    procedures=tech_procedures.find_elements(by=By.XPATH,value="div[@class='sidenav']")
                    for procedure in procedures:
                        procedure_title=procedure.find_element(by=By.CLASS_NAME,value="sidenav-head").get_attribute("id")
                        procedure_name=procedure.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.TAG_NAME,value="a").text
                        procedure_url=procedure.find_element(by=By.CLASS_NAME,value="sidenav-head").find_element(by=By.TAG_NAME,value="a").get_attribute("href")
                        procedure_list[procedure_title+":"+procedure_name]=procedure_url
                        ttps_list[procedure_title+":"+procedure_name]=procedure_url

                teches_list[tech_title+":"+tech_name]=[tech_url,procedure_list]
                ttps_list[tech_title+":"+tech_name]=tech_url

        tacticses_list[tactics_title+":"+tactics_name]=[tactics_url,teches_list]
        ttps_list[tactics_title+":"+tactics_name]=tactics_url
    return (tacticses_list,ttps_list)




def capture_ttp(ttp,ttp_url):
    ttp_id=ttp.split(":")[0].strip()
    ttp_name=ttp.split(":")[1].strip()

    type=ttp_id.split("-")[-1].strip()
    ttp_list={}
    ttp_list["TTP_id"]=ttp_id
    ttp_list["TTP_name"]=ttp_name

    driver.get(ttp_url)

    if "TA" in type:#Tac
        Describtion=""
        detail_p=[]
        try:
            detail_p=driver.find_element(by=By.CLASS_NAME,value="description-body").find_elements(by=By.TAG_NAME,value="p")
        except:
            print(ttp+" Detail error!")
        
        for p in detail_p:
            Describtion+=p.text
        
        ttp_list["Description"]=Describtion      

    # elif ":" in type:#proce
    #     pass
    else:

        Describtion=""
        detail_p=[]
        try:
            detail_p=driver.find_element(by=By.CLASS_NAME,value="description-body").find_elements(by=By.TAG_NAME,value="p")
        except:
            print(ttp+" Detail error!")
        
        for p in detail_p:
            Describtion+=p.text
        
        ttp_list["Description"]=Describtion


        Property={}
        rows=[]
        try:
            Card=driver.find_element(by=By.XPATH,value="//div[@class='description-body']/parent::*/following-sibling::*").find_element(by=By.CLASS_NAME,value="card")
            rows=Card.find_elements(by=By.CLASS_NAME,value="card-data")
        except:
            print(ttp+" Property error!")

        for row in rows:
            text=row.find_elements(by=By.TAG_NAME,value="div")[1].text
            key_value=text.split(":")
            key=key_value[0].strip()
            value=key_value[1].strip()
            Property[key]=value
            
        ttp_list["Property"]=Property

        Examples={}
        trs=[]
        try:
            trs=driver.find_element(by=By.XPATH,value="//h2[@id='examples']/following-sibling::*").find_element(by=By.TAG_NAME,value="tbody").find_elements(by=By.TAG_NAME,value="tr")
        except:
            pass
        
        for tr in trs:
            tds=[]
            try:
                tds=tr.find_elements(by=By.TAG_NAME,value="td")
            except:
                pass
            
            example_id=""
            example_href=""
            example_name=""
            example_description=""
            for td_id in range(len(tds)):
                if td_id==0:
                    example_id=tds[td_id].find_element(by=By.TAG_NAME,value="a").text
                    example_href=tds[td_id].find_element(by=By.TAG_NAME,value="a").get_attribute("href")
                elif td_id==1:
                    example_name=tds[td_id].find_element(by=By.TAG_NAME,value="a").text
                elif td_id==2:
                    ps=tds[td_id].find_elements(by=By.TAG_NAME,value="p")
                    for p in ps:
                        example_description+=p.text
            
            Examples[example_id]=[example_href,example_name,example_description]
            
        ttp_list["Examples"]=Examples






        Mitigations={}
        trs=[]
        try:
            trs=driver.find_element(by=By.XPATH,value="//h2[@id='mitigations']/following-sibling::*").find_element(by=By.TAG_NAME,value="tbody").find_elements(by=By.TAG_NAME,value="tr")
        except:
            print(ttp+" Mitigation error! Table not found!")
        
        for tr in trs:
            tds=[]
            try:
                tds=tr.find_elements(by=By.TAG_NAME,value="td")
            except:
                print(ttp+" Mitigation error! TD not found!")
            
            mitigation_id=""
            mitigation_href=""
            mitigation_name=""
            mitigation_description=""
            for td_id in range(len(tds)):
                if td_id==0:
                    mitigation_id=tds[td_id].find_element(by=By.TAG_NAME,value="a").text
                    mitigation_href=tds[td_id].find_element(by=By.TAG_NAME,value="a").get_attribute("href")
                elif td_id==1:
                    mitigation_name=tds[td_id].find_element(by=By.TAG_NAME,value="a").text
                elif td_id==2:
                    ps=tds[td_id].find_elements(by=By.TAG_NAME,value="p")
                    for p in ps:
                        mitigation_description+=p.text
            
            Mitigations[mitigation_id]=[mitigation_href,mitigation_name,mitigation_description]
            
        ttp_list["Mitigation"]=Mitigations
            


        Detection={}
        trs=[]
        try:
            trs=driver.find_element(by=By.XPATH,value="//h2[@id='detection']/following-sibling::table[1]").find_element(by=By.TAG_NAME,value="tbody").find_elements(by=By.TAG_NAME,value="tr")
        except:
            print(ttp+" Detection error! Table not found!")
        
        for tr in trs:
            tds=[]
            try:
                tds=tr.find_elements(by=By.TAG_NAME,value="td")
            except:
                print(ttp+" Detection error! TD not found!")
            
            detection_id=""
            detection_href=""
            detection_Data_Source=""
            detection_Data_Component=""
            detection_Detects=""

            last_id=""
            last_href=""
            last_ds=""
            for td_id in range(len(tds)):
                if td_id==0:
                    try:
                        detection_id=tds[td_id].find_element(by=By.TAG_NAME,value="a").text
                        detection_href=tds[td_id].find_element(by=By.TAG_NAME,value="a").get_attribute("href")
                    except:
                        detection_id=""
                        detection_href=""

                    if detection_id!=last_id:
                        last_id=detection_id
                        last_href=detection_href

                    if detection_id=="":
                        detection_id=last_id
                        detection_href=last_href            

                elif td_id==1:
                    try:
                        detection_Data_Source=tds[td_id].find_element(by=By.TAG_NAME,value="a").text
                    except:
                        detection_Data_Source=""
                    
                    if detection_Data_Source!=last_ds:
                        last_ds=detection_Data_Source
                    
                    if detection_Data_Source=="":
                        detection_Data_Source=last_ds
                elif td_id==2:
                    detection_Data_Component=tds[td_id].find_element(by=By.TAG_NAME,value="a").text
                elif td_id==3:
                    ps=tds[td_id].find_elements(by=By.TAG_NAME,value="p")
                    for p in ps:
                        detection_Detects+=p.text

            
            Detection[detection_Data_Component]=[detection_Detects,detection_id,detection_href,detection_Data_Source]
        ttp_list["Detection"]=Detection



    return ttp_list



def capture_all_data(ttps_list):
    for ttp,ttp_url in ttps_list.items():
        if os.path.exists(ttp.split(":")[0].strip()+".jsonl") or os.path.exists(ttp.split(":")[0].strip()+".lck"):
            continue
        # os.mknod(year_month+".lck")
        lockfile=open(ttp.split(":")[0].strip()+".lck","w")
        lockfile.close()

        # ttp_url="https://attack.mitre.org/techniques/T1547/001/"
        TTP_Detail=capture_ttp(ttp,ttp_url)

        with jsonlines.open(ttp.split(":")[0].strip()+'.jsonl', mode='a') as writer:
            writer.write(TTP_Detail)
        
        os.remove(ttp.split(":")[0].strip()+".lck")
        



if __name__=="__main__":
    ttps,ttps_list=get_tacticses()
    with jsonlines.open('ttps.jsonl', mode='a') as writer:
        writer.write(ttps)
    
    capture_all_data(ttps_list)



