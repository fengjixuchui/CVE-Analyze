{"TTP_id": "enterprise-TA0004-T1574-T1574.012", "TTP_name": "COR_PROFILER", "Description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.[1][2]The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.[2]Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.[3][4][5][6][7]", "Property": {"ID": "T1574.012", "Sub-technique of": "T1574", "Tactics": "Persistence, Privilege Escalation, Defense Evasion", "Platforms": "Windows", "Permissions Required": "Administrator, User", "Contributors": "Jesse Brown, Red Canary", "Version": "1.0", "Created": "24 June 2020", "Last Modified": "30 August 2021"}, "Examples": {"G0108": ["https://attack.mitre.org/groups/G0108", "Blue Mockingbird", "Blue Mockingbird has used wmic.exe and Windows Registry modifications to set the COR_PROFILER environment variable to execute a malicious DLL whenever a process loads the .NET CLR.[3]"]}, "Mitigation": {"M1038": ["https://attack.mitre.org/mitigations/M1038", "Execution Prevention", "Identify and block potentially malicious unmanaged COR_PROFILER profiling DLLs by using application control solutions like AppLocker that are capable of auditing and/or blocking unapproved DLLs.[8][9][10]"], "M1024": ["https://attack.mitre.org/mitigations/M1024", "Restrict Registry Permissions", "Ensure proper permissions are set for Registry hives to prevent users from modifying keys associated with COR_PROFILER."], "M1018": ["https://attack.mitre.org/mitigations/M1018", "User Account Management", "Limit the privileges of user accounts so that only authorized administrators can edit system environment variables."]}, "Detection": {"Command Execution": ["Extra scrutiny should be placed on suspicious modification of Registry keys such as COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH by command line tools like wmic.exe, setx.exe, and Reg. Monitoring for command-line arguments indicating a change to COR_PROFILER variables may aid in detection.", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "Module Load": ["Monitor DLL files that are associated with COR_PROFILER environment variables.", "DS0011", "https://attack.mitre.org/datasources/DS0011", "Module"], "Process Creation": ["Monitor for newly executed processes, such as setx.exe, that may abuse of the COR_PROFILER variable, monitor for new suspicious unmanaged profiling DLLs loading into .NET processes shortly after the CLR causing abnormal process behavior.[4]", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Windows Registry Key Modification": ["For detecting system and user scope abuse of the COR_PROFILER variable, monitor the Registry for changes to COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH that correspond to system and user environment variables that do not correlate to known developer tools.", "DS0024", "https://attack.mitre.org/datasources/DS0024", "Windows Registry"]}}
