{"TTP_id": "enterprise-TA0005-T1622", "TTP_name": "Debugger Evasion", "Description": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary, but may involve Native API function calls such as IsDebuggerPresent() and NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error).[2][3][4]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().[5][6]", "Property": {"ID": "T1622", "Sub-techniques": "No sub-techniques", "Tactics": "Defense Evasion, Discovery", "Platforms": "Linux, Windows, macOS", "Contributors": "TruKno", "Version": "1.0", "Created": "01 April 2022", "Last Modified": "16 April 2022"}, "Examples": {"S0694": ["https://attack.mitre.org/software/S0694", "DRATzarus", "DRATzarus can use IsDebuggerPresent to detect whether a debugger is present on a victim.[7]"], "S0240": ["https://attack.mitre.org/software/S0240", "ROKRAT", "ROKRAT can check for debugging tools.[8][9][10]"], "S0595": ["https://attack.mitre.org/software/S0595", "ThiefQuest", "ThiefQuest uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. ThiefQuest also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging.[5]"]}, "Mitigation": {}, "Detection": {"Application Log Content": ["Monitor debugger logs for signs of abnormal and potentially malicious activity.", "DS0015", "https://attack.mitre.org/datasources/DS0015", "Application Log"], "Command Execution": ["Monitor executed commands and arguments that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required.", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "OS API Execution": ["Monitor for API calls (such as IsDebuggerPresent()) that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Creation": ["Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. Debugger related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.", "", "", ""]}}
