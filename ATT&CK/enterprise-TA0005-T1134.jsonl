{"TTP_id": "enterprise-TA0005-T1134", "TTP_name": "Access Token Manipulation", "Description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.[1]Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "Property": {"ID": "T1134", "Sub-techniques": "T1134.001, T1134.002, T1134.003, T1134.004, T1134.005", "Tactics": "Defense Evasion, Privilege Escalation", "Platforms": "Windows", "Permissions Required": "Administrator, User", "Effective Permissions": "SYSTEM", "Defense Bypassed": "Heuristic Detection, Host Forensic Analysis, System Access Controls, Windows User Account Control", "CAPEC ID": "CAPEC-633", "Contributors": "Jared Atkinson, @jaredcatkinson; Robby Winchester, @robwinchester3; Tom Ueltschi @c_APT_ure; Travis Smith, Tripwire", "Version": "2.0", "Created": "14 December 2017", "Last Modified": "03 May 2022"}, "Examples": {"S0622": ["https://attack.mitre.org/software/S0622", "AppleSeed", "AppleSeed can gain system level privilege by passing SeDebugPrivilege to the AdjustTokenPrivilege API.[2]"], "G0108": ["https://attack.mitre.org/groups/G0108", "Blue Mockingbird", "Blue Mockingbird has used JuicyPotato to abuse the SeImpersonate token privilege to escalate from web application pool accounts to NT Authority\\SYSTEM.[3]"], "S0625": ["https://attack.mitre.org/software/S0625", "Cuba", "Cuba has used SeDebugPrivilege and AdjustTokenPrivileges to elevate privileges.[4]"], "S0038": ["https://attack.mitre.org/software/S0038", "Duqu", "Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.[5]"], "S0363": ["https://attack.mitre.org/software/S0363", "Empire", "Empire can use PowerSploit's Invoke-TokenManipulation to manipulate access tokens.[6]"], "G0037": ["https://attack.mitre.org/groups/G0037", "FIN6", "FIN6 has used has used Metasploitâ€™s named-pipe impersonation technique to escalate privileges.[7]"], "S0666": ["https://attack.mitre.org/software/S0666", "Gelsemium", "Gelsemium can use token manipulation to bypass UAC on Windows7 systems.[8]"], "S0697": ["https://attack.mitre.org/software/S0697", "HermeticWiper", "HermeticWiper can use AdjustTokenPrivileges to grant itself privileges for debugging with SeDebugPrivilege, creating backups with SeBackupPrivilege, loading drivers with SeLoadDriverPrivilege, and shutting down a local system with SeShutdownPrivilege.[9][10]"], "S0203": ["https://attack.mitre.org/software/S0203", "Hydraq", "Hydraq creates a backdoor through which remote attackers can adjust token privileges.[11]"], "S0607": ["https://attack.mitre.org/software/S0607", "KillDisk", "KillDisk has attempted to get the access token of a process by calling OpenProcessToken. If KillDisk gets the access token, then it attempt to modify the token privileges with AdjustTokenPrivileges.[12]"], "S0576": ["https://attack.mitre.org/software/S0576", "MegaCortex", "MegaCortex can enable SeDebugPrivilege and adjust token privileges.[13]"], "S0378": ["https://attack.mitre.org/software/S0378", "PoshC2", "PoshC2 can use Invoke-TokenManipulation for manipulating tokens.[14]"], "S0194": ["https://attack.mitre.org/software/S0194", "PowerSploit", "PowerSploit's Invoke-TokenManipulation Exfiltration module can be used to manipulate tokens.[15][16]"], "S0446": ["https://attack.mitre.org/software/S0446", "Ryuk", "Ryuk has attempted to adjust its token privileges to have the SeDebugPrivilege.[17]"], "S0633": ["https://attack.mitre.org/software/S0633", "Sliver", "Sliver has the ability to manipulate user tokens on targeted Windows systems.[18][19]"], "S0058": ["https://attack.mitre.org/software/S0058", "SslMM", "SslMM contains a feature to manipulate process privileges and tokens.[20]"], "S0562": ["https://attack.mitre.org/software/S0562", "SUNSPOT", "SUNSPOT modified its security token to grants itself debugging privileges by adding SeDebugPrivilege.[21]"]}, "Mitigation": {"M1026": ["https://attack.mitre.org/mitigations/M1026", "Privileged Account Management", "Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object. [22] Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token.[23]Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command runas.[24]"], "M1018": ["https://attack.mitre.org/mitigations/M1018", "User Account Management", "An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require."]}, "Detection": {"Active Directory Object Modification": ["Monitor for changes made to AD settings that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls.", "DS0026", "https://attack.mitre.org/datasources/DS0026", "Active Directory"], "Command Execution": ["Monitor executed commands and arguments for token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows.[25]", "DS0017", "https://attack.mitre.org/datasources/DS0017", "Command"], "OS API Execution": ["Monitor for API calls, loaded by a payload, for token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. There are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., LogonUser [26], DuplicateTokenEx[27], and ImpersonateLoggedOnUser[28]). Please see the referenced Windows API pages for more information.", "DS0009", "https://attack.mitre.org/datasources/DS0009", "Process"], "Process Creation": ["Monitor for executed processes that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls.", "", "", ""], "Process Metadata": ["Query systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account.[29] Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.", "", "", ""], "User Account Metadata": ["Monitor for contextual data about an account, which may include a username, user ID, environmental data, etc. that may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls.", "DS0002", "https://attack.mitre.org/datasources/DS0002", "User Account"]}}
